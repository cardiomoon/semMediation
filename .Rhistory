nodes=nodes[nodes$no==no, ]
# from="X";no=1;to="Y";label="66"
xpos=nodes$xpos[nodes$name==from]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==from]
start=c(xpos,ypos)
xpos=nodes$xpos[nodes$name==to]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==to]
end=c(xpos,ypos)
if(nchar(label)>1) {
if(nchar(label==3)){
temp1=paste0("expression(",substr(label,1,1),"[",substr(label,2,2),"]","[",substr(label,3,nchar(label)),"])")
} else{
temp2=substr(label,2,nchar(label))
temp2
temp1=paste0("expression(",substr(label,1,1),"[",temp2,"])")
temp1
}
temp=eval(parse(text=temp1))
label=temp
}
myarrow(from=start,to=end,label=label,label.pos=label.pos,arr.pos=arr.pos,...)
}
statisticalDiagram(no=1)
no=1;radx=0.10;rady=0.04;xmargin=0.01
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes
# nodes=nodes[1:19, ]
# write.csv(nodes,"./R/node.csv",row.names = FALSE)
arrows=read.csv("./R/arrow.csv",stringsAsFactors = FALSE)
arrows
#  arrows=arrows[1:19, ]
#  write.csv(arrows,"./R/arrow.csv",row.names = FALSE)
# no=76;radx=0.12;rady=0.04;xmargin=0.03
#  nodes
#  arrows
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
arrows
openplotmat()
for(i in 1:nrow(arrows)){
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=arrows$name[i],no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
drawtext(mid,radx=radx,rady=rady,lab=nodes$name[i],latent=FALSE)
}
myarrow2=function(from,to,label="",no,radx=0.12,rady=0.04,xmargin=0.01,label.pos=0.5,arr.pos=NULL,...){
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes=nodes[nodes$no==no, ]
# from="X";no=1;to="Y";label="66"
xpos=nodes$xpos[nodes$name==from]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==from]
start=c(xpos,ypos)
xpos=nodes$xpos[nodes$name==to]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==to]
end=c(xpos,ypos)
if(nchar(label)>1) {
if(nchar(label==3)){
temp1=paste0("expression(",substr(label,1,1),"[",substr(label,2,2),"]","[",substr(label,3,nchar(label)),"])")
} else{
temp2=substr(label,2,nchar(label))
temp2
temp1=paste0("expression(",substr(label,1,1),"[",temp2,"])")
temp1
}
temp=eval(parse(text=temp1))
label=temp
}
myarrow(from=start,to=end,label=label,label.pos=label.pos,arr.pos=arr.pos,...)
}
openplotmat()
for(i in 1:nrow(arrows)){
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=arrows$name[i],no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
myarrow2=function(from,to,label="",no,radx=0.12,rady=0.04,xmargin=0.01,label.pos=0.5,arr.pos=NULL,...){
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes=nodes[nodes$no==no, ]
# from="X";no=1;to="Y";label="66"
xpos=nodes$xpos[nodes$name==from]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==from]
start=c(xpos,ypos)
xpos=nodes$xpos[nodes$name==to]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==to]
end=c(xpos,ypos)
if(nchar(label)>1) {
if(nchar(label==3)){
temp1=paste0("expression(",substr(label,1,1),"[",substr(label,2,2),"]","[",substr(label,3,nchar(label)),"])")
} else{
temp2=substr(label,2,nchar(label))
temp2
temp1=paste0("expression(",substr(label,1,1),"[",temp2,"])")
temp1
}
temp=eval(parse(text=temp1))
label=temp
}
myarrow(from=start,to=end,label=label,label.pos=label.pos,arr.pos=arr.pos,...)
}
#' Draw arrow
#' @param from coordinates (x,y) of the point *from* which to draw arrow.
#' @param to coordinates (x,y) of the point *to* which to draw arrow.
#' @param lwd line width
#' @param adjust adjust position
#' @param label label
#' @param arr.pos arrow position
#' @param ... Further argument to be passed to straightarrow()
#' @importFrom diagram textplain straightarrow
myarrow=function(from,to,lwd=1,adjust=1,label="",label.pos=0.5,arr.pos=NULL,...){
if(!is.null(arr.pos)){
if(arr.pos==0) arr.pos<-NULL
}
if(is.null(arr.pos)){
if(adjust){
if(from[2]==to[2]) arr.pos=0.8
else if(from[2]>to[2]) arr.pos=0.7
else arr.pos=0.68
} else{
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
if(distance<=0.23) {
arr.pos=0.86
} else if(distance>0.5){
arr.pos=0.95
} else{
arr.pos=0.94
}
}
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
# str(distance)
# str(arr.pos)
}
mid=label.pos*(from+to)
textplain(mid=mid,lab=label,adj=c(1,-0.5))
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
#' Draw node
#' @param ... Further argument to be passed to textellipse() or textrect()
#' @param latent Logical
#' @importFrom diagram textellipse textrect
drawtext=function(...,latent=TRUE){
if(latent) textellipse(...)
else textrect(...)
}
midPoint=function(from=0,to=1,length.out=2){
res=seq(from,to,length.out = length.out+2)
res[c(-1,-length(res))]
}
require(diagram)
no=1;radx=0.10;rady=0.04;xmargin=0.01
statisticalDiagram=function(no=1,radx=0.10,rady=0.04,xmargin=0.01){
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes
# nodes=nodes[1:19, ]
# write.csv(nodes,"./R/node.csv",row.names = FALSE)
arrows=read.csv("./R/arrow.csv",stringsAsFactors = FALSE)
arrows
#  arrows=arrows[1:19, ]
#  write.csv(arrows,"./R/arrow.csv",row.names = FALSE)
# no=76;radx=0.12;rady=0.04;xmargin=0.03
#  nodes
#  arrows
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=arrows$name[i],no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
drawtext(mid,radx=radx,rady=rady,lab=nodes$name[i],latent=FALSE)
}
}
adjustxpos=function(xpos,xmargin=0.01,radx=0.12){
ifelse(xpos==0.5,0.5,
ifelse(xpos>0.5,
1-xmargin-radx-(1.0-xpos)*10*(xmargin+2*radx),
xmargin+radx+(xpos)*10*(xmargin+2*radx)))
}
adjustxpos(1)
adjustxpos(0.9)
myarrow2=function(from,to,label="",no,radx=0.12,rady=0.04,xmargin=0.01,label.pos=0.5,arr.pos=NULL,...){
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes=nodes[nodes$no==no, ]
# from="X";no=1;to="Y";label="66"
xpos=nodes$xpos[nodes$name==from]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==from]
start=c(xpos,ypos)
xpos=nodes$xpos[nodes$name==to]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==to]
end=c(xpos,ypos)
if(nchar(label)>1) {
if(nchar(label==3)){
temp1=paste0("expression(",substr(label,1,1),"[",substr(label,2,2),"]","[",substr(label,3,nchar(label)),"])")
} else{
temp2=substr(label,2,nchar(label))
temp2
temp1=paste0("expression(",substr(label,1,1),"[",temp2,"])")
temp1
}
temp=eval(parse(text=temp1))
label=temp
}
myarrow(from=start,to=end,label=label,label.pos=label.pos,arr.pos=arr.pos,...)
}
statisticalDiagram(no=1)
statisticalDiagram(no=2)
statisticalDiagram(no=4)
statisticalDiagram(no=5)
statisticalDiagram(no=7)
statisticalDiagram(no=8)
statisticalDiagram(no=9)
statisticalDiagram(no=10)
statisticalDiagram(no=14)
statisticalDiagram(no=15)
statisticalDiagram(no=16)
statisticalDiagram(no=17)
statisticalDiagram(no=21)
statisticalDiagram(no=22)
statisticalDiagram(no=23)
shiny::runApp('inst/pmacro')
statisticalDiagram(no=1)
statisticalDiagram(no=49)
statisticalDiagram(no=50)
statisticalDiagram(no=51)
statisticalDiagram(no=51)
statisticalDiagram(no=22)
statisticalDiagram(no=23)
statisticalDiagram(no=24)
statisticalDiagram(no=28)
statisticalDiagram(no=29)
statisticalDiagram(no=30)
statisticalDiagram(no=31)
statisticalDiagram(no=32)
statisticalDiagram(no=36)
statisticalDiagram(no=40)
statisticalDiagram(no=41)
statisticalDiagram(no=45)
statisticalDiagram(no=45,radx=0.06)
statisticalDiagram(no=49)
statisticalDiagram(no=50)
statisticalDiagram(no=51)
statisticalDiagram(no=50)
statisticalDiagram(no=51)
statisticalDiagram(no=50)
statisticalDiagram(no=51)
require(semMediation)
pmacroModel(16)
pmacroModel(17)
library(semMediation)
pmacroModel(17)
pmacro
pmacro[17,]
pmacro[16:17,]
no=17
i=which(pmacro$no==no)
if(length(i)<1) {
cat("Currently, Model number ",no," is not supported.")
} else{
if((no>=6)&(no<7)){
result=statisticalDiagram(no,arrowlabel = FALSE)
} else{
name=list()
sites=list()
moderator=list()
if(pmacro$modName[i]!=""){
name=unlist(strsplit(pmacro$modName[i],":"))
name
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
if(length(pos)==0) pos=3
moderator=list(name=name,label=name,site=x,latent=latent,pos=pos)
moderator
}
M=pmacro$M[i]
if(M=="") M=c()
if(no==74) result=conceptDiagram2(xb=TRUE)
else result=conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
}
}
name=list()
sites=list()
moderator=list()
if(pmacro$modName[i]!=""){
name=unlist(strsplit(pmacro$modName[i],":"))
name
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
if(length(pos)==0) pos=3
moderator=list(name=name,label=name,site=x,latent=latent,pos=pos)
moderator
}
pmacro[16:17,]
pmacroModel(16)
pmacro
M=pmacro$M[i]
if(M=="") M=c()
if(no==74) result=conceptDiagram2(xb=TRUE)
else result=conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
result=conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
pmacro$X[i]
M
pmacro$Y[i]
moderator
radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
latent=rep(FALSE,3);xb=FALSE;mc=FALSE;labels=list()
X="X";M="M";Y="Y";latent=rep(FALSE,3);xb=FALSE
# X="X";M="M";Y="Y";latent=rep(FALSE,3);xb=FALSE
moderator
if(is.null(yinterval)) yinterval=rady*6
openplotmat()
x=c(0+radx+xmargin,0.5)
library(diagram)
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
moderator
select=which(moderator$pos==3)
xpos=midPoint(0,1,length(select))
select
for(j in seq_along(select)){
temp=c(xpos[j],0.5-yinterval+0.05)
assign(paste0("z",select[j]),temp)
}
select=which(moderator$pos==2)
if(length(select)==1){
xpos=1-(radx+xmargin)
ypos=0.5+yinterval-rady
} else{
xpos=midPoint(0.5+2*radx,1-radx,length(select))
ypos=midPoint(0.5+yinterval+2*rady,0.5+rady,length(select))
}
for(j in seq_along(select)){
temp=c(xpos[j],ypos[j])
assign(paste0("z",select[j]),temp)
}
select=which(moderator$pos==1)
if(length(select)==1){
xpos=radx+xmargin
ypos=0.5+yinterval-rady
} else{
xpos=midPoint(radx-xmargin,0.5-2*radx,length(select))
ypos=midPoint(0.5+rady,0.5+yinterval+2*rady,length(select))
}
for(j in seq_along(select)){
temp=c(xpos[j],ypos[j])
assign(paste0("z",select[j]),temp)
}
startpos=list()
sum=1
for(i in seq_along(moderator$pos)){
for(j in 1:length(moderator$site[[i]])){
startpos[[sum]]=get(paste0("z",i))
sum=sum+1
}
}
moderator
select=which(moderator$pos==2)
select
if(length(select)==1){
xpos=1-(radx+xmargin)
ypos=0.5+yinterval-rady
} else{
xpos=midPoint(0.5+2*radx,1-radx,length(select))
ypos=midPoint(0.5+yinterval+2*rady,0.5+rady,length(select))
}
library(semMediation)
pmacroModel(16)
conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
library(semMediation)
if(no==74) {
conceptDiagram2(xb=TRUE)
} else {
conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
}
pmacroModel(16)
pmacroModel(17)
no=17
i=which(pmacro$no==no)
name=list()
sites=list()
moderator=list()
name=unlist(strsplit(pmacro$modName[i],":"))
name
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
pos
pmacro
pmacro$pos[15]
pmacro$pos[15]="2,3"
pmacro
pmacroModel(17)
devtools::use_data(pmacro,rewrite=TRUE)
devtools::use_data(pmacro)
devtools::use_data(pmacro,overwrite=TRUE)
library(semMediation)
devtools::document()
install.packages("roxygen2")
devtools::document()
devtools::check()
pmacro
arrows
nodes
load("~/ownCloud/Documents/semMediation/data/nodes.rda")
nodes
tail(nodes)
load("~/ownCloud/Documents/semMediation/data/arrows.rda")
arrows
tail(arrows)
tail(nodes)
devtools::document()
devtools::document()
devtools::check()
shiny::runApp('inst/pmacro')
library(semMediation)
runApp()
library(semMediation)
library(semMediation)
runPmacro()
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(shiny)
library(semMediation)
library(stringr)
library(DT)
library(editData)
library(shinyWidgets)
library(lavaan)
library(flextable)
library(DiagrammeR)
dataFiles=list.files(path="data","*.csv")
dataNames=str_extract(dataFiles,"[^.]*")
actionBttn3=function(...){
div(style="display:inline-block;",actionBttn(...))
}
pickerInput3=function(...){
div(style="display:inline-block;",pickerInput(...))
}
ui=fluidPage(
h2("Select Data"),
fluidRow(
column(3,
fileInput(file),
selectInput("dataname","Data",choices=dataNames,selectize=FALSE,size=7)
),
column(9,
DTOutput('table')
)
),
h2("Select Process Macro Model Number"),
fluidRow(
column(3,
selectInput("modelno","Model No",choices=pmacro$no,selectize=FALSE,size=25)
),
column(9,
radioGroupButtons(
inputId = "plotChoice",
label = "Select Plot",
choices = c("Conceptual Diagram"=1, "Statistical Diagram"=2),
status = "primary"
),
plotOutput("modelPlot")
)
),
h2("Assign Variables"),
uiOutput("Vars"),
actionButton("Analysis","Analysis"),
uiOutput("result")
)
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
