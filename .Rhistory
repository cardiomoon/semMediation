}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodes$name[i]))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
# print(nodes)
arrows1
covar
arrows2=addArrows(arrows1,covar)
arrows2
no=1.1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
whatLabel="est"
estimateTable=res;
labels=list("d2"="protest=2",d3="protest=3")
covar=list(name="angry",site=list("liking"))
covar=list(name="angry",site=list("liking"))
covar=list(name="angry",site=list("liking"))
equation=catInteraction(Y="liking",W="sexism",count=3,covar=covar)
cat(equation)
semfit=sem(model=equation,data=df)
res=estimatesTable(semfit,digits=3)
res
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
estimateTable
estimateTable=res
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# print(nodes)
arrows1
covar
arrows2=addArrows(arrows1,covar)
arrows2
openplotmat()
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
estimateTable
arrows3<-left_join(arrows2,estimateTable)
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
# print(arrows)
} else{
arrows2$lty=1
arrows3<-arrows2
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodes$name[i]))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# print(nodes)
arrows1
if(no==1.1) {
arrows2=arrows1
} else {
arrows2=addArrows(arrows1,covar)
}
arrows2
openplotmat()
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
estimateTable
arrows3<-left_join(arrows2,estimateTable)
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
# print(arrows)
} else{
arrows2$lty=1
arrows3<-arrows2
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
print(arrows3)
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodes$name[i]))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
res
y=c(1:count,count)
y
res
count=nrow(res)-1
count
y=c(1:count,count)
y
x=c(rep(0,count-1),seq(from=0.05,by=0.1,length.out=2,1))
x=c(rep(0,count-1),seq(from=0.05,by=0.1,length.out=2),1)
x
y
res
count=nrow(res)-1
count
yinterval=0.9/count
yinterval
y=seq(0.9,by=yinterval,length.out = count)
y
yinterval=-0.9/count
start=0.9
y=seq(0.9,by=yinterval,length.out = count)
y
res
count=nrow(res)-2
count
yinterval=-0.9/count
start=0.9
y=seq(0.9,by=yinterval,length.out = count)
y
res
count=nrow(res)
count
yinterval=-0.9/count
start=0.95
y=seq(0.95,by=yinterval,length.out = count)
y
res
count=nrow(res)-2
count
yinterval=-0.9/count
start=0.95
y=seq(0.95,by=yinterval,length.out = count)
y
res
count=nrow(res)-1
count
yinterval=-0.9/count
start=0.95
y=seq(0.95,by=yinterval,length.out = count)
y
res
count=nrow(res)-1
count
yinterval=-0.8/count
start=0.9
y=seq(0.9,by=yinterval,length.out = count)
y
res
count=nrow(res)-1
count
yinterval=-0.8/(count-1)
start=0.9
y=seq(0.9,by=yinterval,length.out = count)
y
y=c(y,0.1,0.5)
x=c(rep(0,count-1),seq(from=0.05,by=0.1,length.out=2),1)
x
no=rep(1.1,nrow(res)+1)
name=c(res$Predictors,res$Variables[1])
data.frame(no=no,name=name,xpos=x,ypos=y,stringsAsFactors = FALSE)
res=res[-1,]
res
count=nrow(res)-1
count
yinterval=-0.8/(count-1)
start=0.9
y=seq(0.9,by=yinterval,length.out = count)
y
y=c(y,0.1,0.5)
x=c(rep(0,count-1),seq(from=0.05,by=0.1,length.out=2),1)
x
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
no=1.1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
whatLabel="est"
estimateTable=res;
labels=list("d2"="protest=2",d3="protest=3")
covar=list(name="angry",site=list("liking"))
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
if(no!=1.1) nodes=addNodes(nodes,covar,radx=radx,rady=rady)
# print(nodes)
arrows1
covar
if(no==1.1) {
arrows2=arrows1
} else {
arrows2=addArrows(arrows1,covar)
}
arrows2
openplotmat()
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
estimateTable
arrows3<-left_join(arrows2,estimateTable)
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
# print(arrows)
} else{
arrows2$lty=1
arrows3<-arrows2
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodes$name[i]))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
res=estimatesTable(semfit,digits=3)
res
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
estimateTable=res
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
if(no!=1.1) nodes=addNodes(nodes,covar,radx=radx,rady=rady)
# print(nodes)
arrows1
covar
if(no==1.1) {
arrows2=arrows1
} else {
arrows2=addArrows(arrows1,covar)
}
arrows2
openplotmat()
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
estimateTable
arrows3<-left_join(arrows2,estimateTable)
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
# print(arrows)
} else{
arrows2$lty=1
arrows3<-arrows2
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodes$name[i]))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
library(semMediation)
runApp()
ss=sim_slopes(fit,pred=sexism,modx=protest,digits=3,confint=TRUE)
ss$slopes
library(tibble)
df=as_tibble(ss$slopes[,c(1,2,4,5)])
df[]=lapply(df,as.numeric)
df
plot(ss,digits=3)
johnson_neyman(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=protest,modx=sexism)
probe_interaction(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest,digits=3,confint=TRUE)
ss$slopes
library(tibble)
df=as_tibble(ss$slopes[,c(1,2,4,5)])
df[]=lapply(df,as.numeric)
df
names(df)=c("protest","est","low","high")
df
df=as.data.frame(df)
df
df[2:4]=round(df[2:4])
df
df=as_tibble(ss$slopes[,c(1,2,4,5)])
df[]=lapply(df,as.numeric)
names(df)=c("protest","est","low","high")
df=as.data.frame(df)
df[2:4]=round(df[2:4],3)
df
ggplot(data=df,aes(y=protest,x=est))+geom_point()
ggplot(data=df,aes(y=est,x=protest))+geom_point()
ggplot(data=df,aes(y=est,x=protest))+geom_point()+
geom_pointrange(aes(ymin=low,ymax=high))
ggplot(data=df,aes(y=est,x=protest))+geom_point()+
geom_pointrange(aes(ymin=low,ymax=high))+coord_flip()
runApp()
runApp()
library(semMediation)
runApp()
runApp()
teams=read.csv("./inst/pmacro/data/teams.csv",stringsAsFactors = FALSE)
teams
teams=read.csv("./inst/pmacro/data/teams.csv",stringsAsFactors = FALSE)
teams=read.csv("./inst/pmacro/data/teams.csv",stringsAsFactors = FALSE)
teams=read.csv("./data/teams.csv",stringsAsFactors = FALSE)
teams
names(teams)
fit=lm(neget0n~dysfunc,data=teams)
fit=lm(negeton~dysfunc,data=teams)
fit=lm(negtone~dysfunc,data=teams)
summary(fit)
fit=lm(perform~dysfunc+negtone*negexp)
names(teams)
fit=lm(perform~dysfunc+negtone*negexp)
fit=lm(perform~dysfunc+negtone*negexp,data=teams)
summary(fit)
fit1=lm(negtone~dysfunc,data=teams)
summary(fit1)
fit=lm(perform~dysfunc+negtone*negexp,data=teams)
summary(fit)
interaction_plot(fit,pred=negtone,modx=negexp)
library(jtools)
interaction_plot(fit,pred=negtone,modx=negexp)
interact_plot(fit,pred=negtone,modx=negexp)
runApp()
runApp()
