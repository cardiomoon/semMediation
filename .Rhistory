library(semMediation)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
library(semMediation)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
library(semMediation)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
library(semMediation)
no=1.1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
whatLabel="est"
estimateTable=res;
labels=list("d2"="protest=2",d3="protest=3")
covar=list()
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
#' Make arrows from estimatesTable
#' @param res A data.frame, result of estimatesTable
est2Arrows=function(res){
no=rep(1.1,nrow(res))
name=paste0("b",1:nrow(res))
start=res$Predictors
end=res$Variables
labelpos=rep(0.5,nrow(res))
arrowpos=rep(0.84,nrow(res))
data.frame(no,name,start,end,labelpos,arrowpos,stringsAsFactors = FALSE)
}
#' Make nodes from estimatesTable
#' @param res A data.frame, result of estimatesTable
est2Nodes=function(res){
res
count=(nrow(res)-1)/2
count
if(count%%2==0){
if(count<=2) {
y=seq(from=(0.6+0.2*(count-1)),by=-0.2,length.out=count+2)
} else{
y=seq(from=(0.56+1.2*(count-1)),by=-1.2,length.out=count+2)
}
y=c(y,rep(y[length(y)],count-1))
} else{
if(count<=2) {
y=seq(from=(0.5+0.2*(count-1)),by=-0.2,length.out=count+2)
} else{
y=seq(from=(0.5+1.2*(count-1)),by=-1.2,length.out=count+2)
}
y=c(y,rep(y[length(y)],count-1))
}
y=c(y,0.5)
y
x=c(rep(0,count+1),seq(from=0.05,by=0.1,length.out=count),1)
no=rep(1.1,nrow(res)+1)
name=c(res$Predictors,res$Variables[1])
data.frame(no=no,name=name,xpos=x,ypos=y,stringsAsFactors = FALSE)
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
#'Add covariates to nodes
#'@param nodes A data.frame
#'@param covar A list of covariates
#'@param radx horizontal radius of the box.
#'@param rady vertical radius of the box.
addNodes=function(nodes,covar,radx=0.10,rady=0.04){
if(length(covar$name)>0){
number<-name<-xpos<-ypos<-c()
minypos=min(nodes$ypos)
maxxpos=min(nodes$xpos[nodes$ypos==minypos])
if(nodes$no[1]==4.2) {
maxxpos=-(radx/2)
minypos=0.4
}
for(i in 1:length(covar$name)){
number=c(number,nodes$no[1])
name=c(name,covar$name[i])
xpos=c(xpos,maxxpos+radx/2*i)
ypos=c(ypos,minypos-(rady*2+0.02)*i)
}
df=data.frame(no=number,name=name,xpos=xpos,ypos=ypos)
nodes=rbind(nodes,df)
nodes=adjustNodes(nodes)
}
nodes
}
#'Add covariates to arrows
#'@param arrows A data.frame
#'@param covar A list of covariates
addArrows=function(arrows,covar){
if(length(covar$name)>0){
number<-name<-start<-end<-labelpos<-arrpos<-c()
count=1
for(i in 1:length(covar$name)){
for(j in 1:length(covar$site[[i]])){
number=c(number,arrows$no[1])
name=c(name,paste0("h",count))
start=c(start,covar$name[i])
end=c(end,covar$site[[i]][j])
labelpos=c(labelpos,0.5)
arrpos=c(arrpos,0.84)
count=count+1
}
}
number
name
start
end
labelpos
arrpos
df=data.frame(no=number,name=name,start=start,end=end,labelpos=labelpos,arrpos=arrpos)
arrows=rbind(arrows,df)
}
arrows
}
#'Adjust y position of nodes
#'@param nodes A data.frame
adjustNodes=function(nodes){
miny=min(nodes$ypos)
if(miny<0.05){
if(miny>=0) {
nodes$ypos=nodes$ypos+0.05
} else{
nodes$ypos=nodes$ypos+0.05-miny
}
}
if(max(nodes$ypos)>0.95) {
nodes$ypos=nodes$ypos*0.95/max(nodes$ypos)
}
nodes
}
#'convert a vextor of names with list
#'@param labels A named list
#'@param names A character vector to look for
#'@param exact A logical
findNames=function(labels,names,exact=FALSE){
result=c()
for(i in 1:length(names)){
result=c(result,findName(labels,names[i],exact=exact))
}
result
}
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
#'@param exact A logical
findName=function(labels,name="MiX",exact=FALSE){
if(length(labels)==0) {
result=name
} else if(!is.null(labels[[name]])) {
result=labels[[name]]
} else if(!exact){
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0)
temp=c(temp,labels[[names(labels[i])]])
temp
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
} else{
result=name
}
result
}
#'Adjust x position
#'@param xpos x position
#'@param xmargin horizontal margin of plot
#'@param radx horizontal radius of the box.
adjustxpos=function(xpos,xmargin=0.01,radx=0.12){
ifelse(xpos==0.5,0.5,
ifelse(xpos>0.5,
1-xmargin-radx-(1.0-xpos)*10*(xmargin+2*radx),
xmargin+radx+(xpos)*10*(xmargin+2*radx)))
}
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
print(nodes)
arrows1
covar
arrows2=addArrows(arrows1,covar)
arrows2
openplotmat()
arrows2$Predictors=findNames(labels,arrows2$start,
exact=ifelse(no==1.1,TRUE,FALSE))
arrows2$Variables=findNames(labels,arrows2$end,
exact=ifelse(no==1.1,TRUE,FALSE))
arrows2
estimatTable
estimateTable
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
no=1.1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
whatLabel="est"
estimateTable=res;
labels=list("d2"="protest=2",d3="protest=3")
covar=list()
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
print(nodes)
arrows1
covar
arrows2=addArrows(arrows1,covar)
arrows2
openplotmat()
if(no!=1.1){
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
library(semMediation)
protest=read.csv("./inst/pmacro/data/protest.csv",stringsAsFactors = FALSE)
str(protest)
df=addCatVar(protest,"protest")
str(df)
equation=catInteraction(Y="liking",W="sexism",count=3)
cat(equation)
semfit=sem(model=equation,data=df)
res=estimatesTable(semfit,digits=3)
res
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
no=1.1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
whatLabel="est"
estimateTable=res;
labels=list("d2"="protest=2",d3="protest=3")
covar=list()
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
# print(nodes)
arrows1
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=nodes[nodes$no==no, ]
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=arrows[arrows$no==no,]
}
nodes
# Add covariates
nodes=addNodes(nodes,covar,radx=radx,rady=rady)
# print(nodes)
arrows1
covar
arrows2=addArrows(arrows1,covar)
arrows2
openplotmat()
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,arrows2$start)
}
arrows2$Variables=findNames(labels,arrows2$end)
arrows2
estimateTable
arrows3<-left_join(arrows2,estimateTable)
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
# print(arrows)
} else{
arrows2$lty=1
arrows3<-arrows2
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
# print(arrows3)
drawArrows(arrows3,nodes,xmargin=xmargin,rady=rady,radx=radx)
print(arrows3)
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
library(semMediation)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
source('~/ownCloud/Documents/semMediation/R/statisticalDiagram.R', echo=TRUE)
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
vars=c("negemot","sex","age");dep="govact";suffix=0
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
Y="govact"
tripleEquation(Y=Y,vars=vars,dep=dep,covar=covar)
tripleEquation(Y=Y,vars=vars,dep=dep,covar=covar,mode=1)
#'@param W Name of moderator variable
#'@param data A data.frame
#'@param count length of unique values of independent variable
#'@param prefix A prefix
#'@export
#'@examples
#'cat(catInteraction(Y="mpg",W="wt",count=3))
#'cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars))
#'covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#'cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars),covar=covar)
catInteraction=function(Y="liking",X=NULL,W="sexism",data=NULL,
count=NULL,prefix="b",covar=list()){
if(is.null(count)) count=length(unique(data[[X]]))
no=1
res=c()
for(i in 2:count){
res=c(res,paste0(prefix,i-1,"*d",i))
no=no+1
}
res=c(res,paste0(prefix,no,"*",W))
for(i in 2:count){
res=c(res,paste0(prefix,no+i-1,"*d",i,":",W))
}
temp=paste0(Y," ~ ",paste0(res,collapse="+"))
temp=paste0(temp,"\n",W," ~ ",W,".mean*1")
temp=paste0(temp,"\n",W," ~~ ",W,".var*",W)
temp=addCovarEquation(temp,covar,prefix="h")
temp
}
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars))
cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars),covar=covar)
#'@param W Name of moderator variable
#'@param data A data.frame
#'@param count length of unique values of independent variable
#'@param prefix A prefix
#'@export
#'@examples
#'cat(catInteraction(Y="mpg",W="wt",count=3))
#'cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars))
#'covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#'cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars),covar=covar)
catInteraction=function(Y="liking",X=NULL,W="sexism",data=NULL,
count=NULL,prefix="b",covar=list()){
if(is.null(count)) count=length(unique(data[[X]]))
no=1
res=c()
for(i in 2:count){
res=c(res,paste0(prefix,i-1,"*d",i))
no=no+1
}
res=c(res,paste0(prefix,no,"*",W))
for(i in 2:count){
res=c(res,paste0(prefix,no+i-1,"*d",i,":",W))
}
temp=paste0(Y," ~ ",paste0(res,collapse="+"))
temp=addCovarEquation(temp,covar,prefix="h")
temp=paste0(temp,"\n",W," ~ ",W,".mean*1")
temp=paste0(temp,"\n",W," ~~ ",W,".var*",W)
temp
}
cat(catInteraction(Y="mpg",W="wt",count=3))
cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars),covar=covar)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
cat(catInteraction(Y="mpg",X="cyl",W="wt",data=mtcars,covar=covar))
system("grep 'addCovarEqua' *")
system("grep -r 'addCovarEqua' *")
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
statisticalDiagram(1)
statisticalDiagram(2)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
devtools::document()
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
protest=read.csv("./inst/pmacro/data/protest.csv",stringsAsFactors = FALSE)
str(protest)
df=addCatVar(protest,"protest")
str(df)
equation=catInteraction(Y="liking",W="sexism",count=3)
cat(equation)
library(lavaan)
library(diagram)
library(dplyr)
library(semMediation)
semfit=sem(model=equation,data=df)
res=estimatesTable(semfit,digits=3)
res
statisticalDiagram(no=1.1,estimateTable=res,whatLabel="est",labels=list("d2"="protest=2",d3="protest=3"))
str(df)
fit=lm(liking~protest*sexism,data=df)
summary(fit)
interact_plot(fit,pred=protest,modx=sexism)
interact_plot(fit,pred=sexism,modx=protest)
sim_slopes(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=sexism,modx=protest)
sim_slopes(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
fit=lm(liking~protest*sexism,data=df)
summary(fit)
interact_plot(fit,pred=protest,modx=sexism)
interact_plot(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss)
johnson_neyman(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=protest,modx=sexism)
johnson_neyman(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=protest,modx=sexism)
interact_plot(fit,pred=sexism,modx=protest)
johnson_neyman(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss)
plot(ss,digits=3)
ss=sim_slopes(fit,pred=sexism,modx=protest)
sim_slopes(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss,digits=3)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss,digits=3)
interact_plot(fit,pred=protest,modx=sexism)
interact_plot(fit,pred=sexism,modx=protest)
ss=sim_slopes(fit,pred=sexism,modx=protest)
plot(ss,digits=3)
johnson_neyman(fit,pred=sexism,modx=protest)
cat_plot(fit,pred=sexism,modx=protest)
probe_interaction(fit,pred=sexism,modx=protest)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
