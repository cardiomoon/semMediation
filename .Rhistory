adjustxpos=function(xpos,xmargin=0.01,radx=0.12){
ifelse(xpos==0.5,0.5,
ifelse(xpos>0.5,
1-xmargin-radx-(1.0-xpos)*10*(xmargin+2*radx),
xmargin+radx+(xpos)*10*(xmargin+2*radx)))
}
#' @param from coordinates (x,y) of the point *from* which to draw arrow.
#' @param to coordinates (x,y) of the point *to* which to draw arrow.
#' @param label label to display
#' @param no process macro model number
#' @param radx horizontal radius of the box.
#' @param rady vertical radius of the box.
#' @param xmargin horizontal margin of plot
#' @param label.pos label position
#' @param arr.pos arrow position
#' @param ... Further argument to be passed to straightarrow()
myarrow2=function(from,to,label="",no,radx=0.12,rady=0.04,xmargin=0.01,label.pos=0.5,arr.pos=NULL,...){
nodes=nodes[nodes$no==no, ]
# from="X";no=1;to="Y";label="66"
xpos=nodes$xpos[nodes$name==from]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==from]
start=c(xpos,ypos)
xpos=nodes$xpos[nodes$name==to]
xpos=adjustxpos(xpos,xmargin,radx)
ypos=nodes$ypos[nodes$name==to]
end=c(xpos,ypos)
if(nchar(label)>1) {
if(nchar(label==3)){
temp1=paste0("expression(",substr(label,1,1),"[",substr(label,2,2),"]","[",substr(label,3,nchar(label)),"])")
} else{
temp2=substr(label,2,nchar(label))
temp2
temp1=paste0("expression(",substr(label,1,1),"[",temp2,"])")
temp1
}
temp=eval(parse(text=temp1))
label=temp
}
myarrow(from=start,to=end,label=label,label.pos=label.pos,arr.pos=arr.pos,...)
}
#' @param from coordinates (x,y) of the point *from* which to draw arrow.
#' @param to coordinates (x,y) of the point *to* which to draw arrow.
#' @param lwd line width
#' @param adjust adjust position
#' @param label label
#' @param label.pos label position
#' @param arr.pos arrow position
#' @param ... Further argument to be passed to straightarrow()
#' @export
#' @importFrom diagram textplain straightarrow
myarrow=function(from,to,lwd=1,adjust=1,label="",label.pos=0.5,arr.pos=NULL,...){
if(!is.null(arr.pos)){
if(arr.pos==0) arr.pos<-NULL
}
if(is.null(arr.pos)){
if(adjust){
if(from[2]==to[2]) arr.pos=0.8
else if(from[2]>to[2]) arr.pos=0.7
else arr.pos=0.68
} else{
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
if(distance<=0.23) {
arr.pos=0.86
} else if(distance>0.5){
arr.pos=0.95
} else{
arr.pos=0.94
}
}
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
# str(distance)
# str(arr.pos)
}
mid=label.pos*(from+to)
textplain(mid=mid,lab=label,adj=c(1,-0.5))
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
#' Draw node
#' @param ... Further argument to be passed to textellipse() or textrect()
#' @param latent Logical
#' @importFrom diagram textellipse textrect
#' @export
drawtext=function(...,latent=TRUE){
if(latent) textellipse(...)
else textrect(...)
}
openplotmat()
for(i in 1:nrow(arrows)){
cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
label=c()
for(j in 1:length(nodes)){
temp=labels[[nodes$name[j]]]
if(!is.null(temp)) {
label=c(label,temp)
} else{
label=c(label,nodes$name[j])
}
}
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
}
nodes
library(semMediation)
statisticalDiagram(1)
runApp('inst/pmacro')
#'Draw statistical diagram
#'@param no process macro model number
#'@param radx horizontal radius of the box.
#'@param rady vertical radius of the box.
#'@param xmargin horizontal margin of plot
#'@param arrowlabel logical whether or not draw arrowlabel
#'@export
#'@examples
#'statisticalDiagram(1)
statisticalDiagram=function(no=1,radx=0.10,rady=0.04,xmargin=0.01,arrowlabel=TRUE,labels=list()){
#no=1;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
statisticalDiagram(1)
statisticalDiagram(2)
no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
# no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
load("~/Documents/ownCloud/Documents/semMediation/data/nodes.rda")
load("~/Documents/ownCloud/Documents/semMediation/data/arrows.rda")
statisticalDiagram(2)
library(semMediation)
runApp('inst/pmacro')
statisticalDiagram(3)
#'Draw statistical diagram
#'@param no process macro model number
#'@param radx horizontal radius of the box.
#'@param rady vertical radius of the box.
#'@param xmargin horizontal margin of plot
#'@param arrowlabel logical whether or not draw arrowlabel
#'@export
#'@examples
#'statisticalDiagram(3)
statisticalDiagram=function(no=1,radx=0.10,rady=0.04,xmargin=0.01,arrowlabel=TRUE,labels=list()){
# no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
#cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
statisticalDiagram(3)
library(semMediation)
statisticalDiagram(76)
labels=list(X="age",Mi="educ",Y="interest",W="male")
grep("MiX","Mi")
grep("Mi","MiX")
LETTERS[1:5]
paste0(LETTERS[1:5],collape=":")
paste0(LETTERS[1:5],collapse=":")
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
}
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
findName(labels,name)
names(labels)
length(labels)
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
labels[[name]]
temp=c()
length(labels)
i=1
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
temp
grep(names(labels)[i],name)
i=2
grep(names(labels)[i],name)
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
temp
i=3
grep(names(labels)[i],name)
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
i=3
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
labels[[name]]
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
}
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
length(labels)
names(labels)
findName(labels,name)
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
}
temp
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
labels[[name]]
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,labels[[names(labels[i])]])
temp
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
length(labels)
names(labels)
findName(labels,name)
library(semMediation)
runApp('inst/pmacro')
statisticalDiagram(1)
labels=list()
labels
name="X"
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,labels[[names(labels[i])]])
temp
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
length(labels)
library(semMediation)
statisticalDiagram(1)
statisticalDiagram(76)
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
caskets=read.csv("./R/caskets.csv",stringsAsFactors = FALSE)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit=sem(model=model,data= caskets )
summary(fit)
reliablityTable2(fit)
require(semMediation)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
reliablityTable2(fit)
reliabilityTable2(fit)
reliabilityTable2(fit)
reliabilityTable(fit)
fit
reliabilityTable(fit)
reliablityTable2(fit)
reliabilityTable2(fit)
discriminantValidityTable2(fit)
discriminantValidityTable2(fit)
runApp('inst/pmacro')
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=fit2alpha(fit)
df2flextable(result)
result=fit2alpha(fit)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
summary(fit)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
require(lavaan)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=fit2alpha(fit)
df2flextable(result)
estimatesTable2(fit)
reliabilityTable2(fit)
result=tryCatch(semTools::reliability(fit),error= function(e) "error")
result
require(semTools)
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=tryCatch(semTools::reliability(fit),error= function(e) "error")
result
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable2(fit)
reliability(fit)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
require(lavaan)
require(semTools)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable2(fit)
estimatesTable2(fit,digits=3)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
require(lavaan)
require(semTools)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
library(semMediation)
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
library(semMediation)
estimatesTable2(fit,digits=3)
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
runApp('inst/pmacro')
nodes
arrows
arrows[arrows$no==76,]
estimatesTable(fit,digits=3)
devtools::document()
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
devtools::document()
devtools::check()
devtools::check()
library(semMediation)
statisticalDiagram(3)
runApp('inst/pmacro')
devtools::document()
devtools::check()
library(semMediation)
