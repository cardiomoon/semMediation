shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = tagList(textInput(paste0("txt", input$add),
"Insert some text"),
actionButton("remove","remove")
)
)
})
observeEvent(input$remove,{
removeUI("#add")
})
}
# Complete app with UI and server components
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = tagList(textInput(paste0("txt", input$add),
"Insert some text"),
actionButton("remove","remove")
)
)
})
observeEvent(input$remove,{
removeUI("#txt")
})
}
# Complete app with UI and server components
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = tagList(textInput(paste0("txt", input$add),
"Insert some text",value=paste0("txt", input$add)),
actionButton("remove","remove")
)
)
})
observeEvent(input$remove,{
removeUI("#txt")
})
}
# Complete app with UI and server components
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
# Server logic
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = tagList(textInput(paste0("txt", input$add),
"Insert some text",value=paste0("txt", input$add)),
actionButton("remove","remove")
)
)
})
observeEvent(input$remove,{
removeUI("div:has(> #txt)")
})
}
# Complete app with UI and server components
shinyApp(ui, server)
runApp('inst/pmacro')
runApp('inst/pmacro')
library(shiny); runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
runApp('inst/pmacro/app2.R')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
runApp()
runApp()
library(semMediation)
statisticalDiagram(4)
library(semMediation)
statisticalDiagram(4)
library(semMediation)
runApp()
statisticalDiagram(1)
unique(nodes$no)
statisticalDiagram(4)
statisticalDiagram(7)
statisticalDiagram(14)
statisticalDiagram(4)
statisticalDiagram(7)
statisticalDiagram(14)
set.seed(1839)
var1 <- rnorm(100)
cond <- rbinom(100, 1, .5)
var2 <- var1 * cond + rnorm(100)
df3 <- data.frame(var1, var2, cond)
df3
saveRDS(df3,"df3.RDS")
require(processr)
mod1result <- model1(iv = "var1", dv = "var2", mod = "cond", data = df3)
kable(mod1result)
mod1result
saveRDS(df3,"df3.RDS")
runApp()
model1
lm(var2~var1*cond,data=df3)
summary(lm(var2~var1*cond,data=df3))
require(lavaan)
runApp()
runApp()
shiny::runApp('inst/pmacro')
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
caskets
disaster=read.csv("./inst/pmacro/data/disaster.csv",stringsAsFactors = FALSE)
estress=read.csv("./inst/pmacro/data/estress.csv",stringsAsFactors = FALSE)
glbwarm=read.csv("./inst/pmacro/data/glbwarm.csv",stringsAsFactors = FALSE)
pmi=read.csv("./inst/pmacro/data/pmi.csv",stringsAsFactors = FALSE)
protest=read.csv("./inst/pmacro/data/protest.csv",stringsAsFactors = FALSE)
teams=read.csv("./inst/pmacro/data/teams.csv",stringsAsFactors = FALSE)
pmi
runApp('inst/pmacro')
equation="import ~ a1*cond
pmi ~ a2*cond
reaction ~ c*cond + b1*import+b2*pmi
indirect :=(a1)*(b1)+a2*b2
direct :=c
total := direct + indirect"
require(lavaan)
fit=sem(model=equation,data=pmi)
fit
parameterEstimates(fit)
makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(makeEquation(X="cond",M=c("import","pmi"),Y="reaction"))
cat(makeEquation(X="cond",M=c("import","pmi"),Y="reaction",add2ndMediation = FALSE))
runApp('inst/pmacro')
nodes=read.csv("./R/node.csv",stringsAsFactors = FALSE)
nodes
arrows=read.csv("./R/arrow.csv",stringsAsFactors = FALSE)
devtools::use_data(arrows,overwrite=TRUE)
devtools::use_data(nodes,overwrite=TRUE)
statisticalDiagram(4.2)
nodes$no
library(semMediation)
pmacroModel(4.2)
pmacro
pmacro=read.csv("./R/pmacro.csv",stringsAsFactors = FALSE)
devtools::use_data(pmacro,overwrite=TRUE)
pmacroModel(4.2)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
makeEquation(X="X",M=c("M1","M2"),Y="Y",add2ndMediation = FALSE)
X="X";M=c("M1","M2");Y="Y";add2ndMediation = FALSE
(countX=length(X))
(countM=length(M))
(countY=length(Y))
if(countX*countM*countY==0) {
equation=" # You need at least one dependent variable(s),\n#one mediation variable(s) and one independent variable(s)."
} else{
equation=paste0("# Mediation Effect\n",makeEquation2(X,M,Y))
equation=addLine(equation,makeEquation1(X,M,add2ndMediation=add2ndMediation))
equation=addLine(equation,makeEquation3(X,M,Y,add2ndMediation=add2ndMediation))
}
#'Add line feed to string
#'
#'@param x A string
#'@param ... one or more R objects, to be converted to character vectors.
addLine=function(x,...){
if(x=="") x<-paste0(...)
else x<-paste0(x,"\n",...)
x
}
#' Make mediation equations 1
#'
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param stage An integer indicating the order
#' @param start An integer
#' @param add2ndMediation whether or not make a 2nd mediation equation
makeEquation1=function(X,M,stage=1,start=0,add2ndMediation=TRUE){
countX=length(X)
countM=length(M)
equation=""
for(i in 1:countM){
sub=""
for(j in 1:countX){
sub=addPlus(sub,letters[stage],start+(i-1)*countX+j,"*",X[j])
}
if(add2ndMediation &(countM>1)&(i>1)){
sub=addPlus(sub,"d",i-1,"*",M[i-1])
}
temp=paste0(M[i],"~",sub)
equation=addLine(equation,temp)
}
equation
}
#' Make mediation equations 2
#'
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
makeEquation2=function(X,M,Y){
countX=length(X)
countM=length(M)
countY=length(Y)
equation=""
for(i in 1:countY){
temp=makeEquation1(M,Y[i],stage=2,start=(i-1)*countM)
temp
sub=""
for(j in 1:countX){
sub=addPlus(sub,letters[3],(i-1)*countX+j,"*",X[j])
}
temp=addPlus(temp,sub)
equation=addLine(equation,temp)
}
equation
}
#' Make mediation equations 3
#'
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param add2ndMediation whether or not make a 2nd mediation equation
makeEquation3=function(X,M,Y,add2ndMediation=TRUE){
(countX=length(X))
(countM=length(M))
(countY=length(Y))
equation=""
ind=c()
for(k in 1:countY){
for(i in 1:countX) {
for(j in 1:countM) {
noA=(i-1)*countM+j
no=noA+(k-1)*countX*countM
b=((noA-1)%/%countX)+1+(k-1)*countM
#temp=paste0("ind",no,":=a",noA,"*b",b)
#equation=addLine(equation,temp)
ind=c(ind,paste0("a",noA,"*b",b))
temp=paste0("ind",length(ind),":=",ind[length(ind)])
equation=addLine(equation,temp)
}
}
}
secondInd=c()
if(add2ndMediation &(countM>1)){
for(k in 1:countY){
for(j in 2:countM){
equationa=""
for(i in 1:countX){
start=(j-2)*countX
tempa=paste0("a",start+i,"*d",j-1,"*b",j+(k-1)*countM)
equationa=addPlus(equationa,tempa)
}
#temp=paste0("secondInd",(j-1)+(k-1)*(countM-1),":=",equationa)
secondInd=c(secondInd,equationa)
temp=paste0("secondInd",length(secondInd),":=",secondInd[length(secondInd)])
equation=addLine(equation,temp)
}
}
}
thirdInd=c()
if(add2ndMediation &(countM>2)){
for(k in 1:countY){
for(j in 3:countM){
equationa=""
for(i in 1:countX){
start=(j-3)*countX
tempa=paste0("a",start+i,"*d",j-2,"*d",j-1,"*b",j+(k-1)*countM)
equationa=addPlus(equationa,tempa)
}
#temp=paste0("thirdInd",j-2,":=",equationa)
#temp=paste0("thirdInd",(j-2)+(k-1)*(countM-2),":=",equationa)
thirdInd=c(thirdInd,equationa)
temp=paste0("thirdInd",length(thirdInd),":=",thirdInd[length(thirdInd)])
equation=addLine(equation,temp)
}
}
}
## total effect
total=c()
for(k in 1:countY){
# direct effect
direct=paste0("c",seq(1:countX)+(k-1)*countX)
Effect=Reduce(addPlus,direct)
# indirect effect
if(countM>=1){
start=1+(k-1)*length(ind)/countY
end=start+length(ind)/countY-1
indirectEffect=Reduce(addPlus,ind[start:end])
Effect=addPlus(Effect,indirectEffect)
}
# secondIndirect
if(countM>=2){
start=1+(k-1)*length(secondInd)/countY
end=start+length(secondInd)/countY-1
secondIndEffect=Reduce(addPlus,secondInd[start:end])
Effect=addPlus(Effect,secondIndEffect)
}
# thirdIndirect
if(countM>=3){
start=1+(k-1)*length(thirdInd)/countY
end=start+length(thirdInd)/countY-1
thirdIndEffect=Reduce(addPlus,thirdInd[start:end])
Effect=addPlus(Effect,thirdIndEffect)
}
temp=paste0("total",k,":=",Effect)
equation=addLine(equation,temp)
}
equation
}
#' Make mediation equations 3
#'
#' @param X A character vectors indicating independent variables
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param add2ndMediation whether or not make a 2nd mediation equation
#'
#' @export
makeEquation=function(X,M,Y,add2ndMediation=TRUE){
(countX=length(X))
(countM=length(M))
(countY=length(Y))
if(countX*countM*countY==0) {
equation=" # You need at least one dependent variable(s),\n#one mediation variable(s) and one independent variable(s)."
} else{
equation=paste0("# Mediation Effect\n",makeEquation2(X,M,Y))
equation=addLine(equation,makeEquation1(X,M,add2ndMediation=add2ndMediation))
equation=addLine(equation,makeEquation3(X,M,Y,add2ndMediation=add2ndMediation))
}
equation
}
(countX=length(X))
(countM=length(M))
(countY=length(Y))
if(countX*countM*countY==0) {
equation=" # You need at least one dependent variable(s),\n#one mediation variable(s) and one independent variable(s)."
} else{
equation=paste0("# Mediation Effect\n",makeEquation2(X,M,Y))
equation=addLine(equation,makeEquation1(X,M,add2ndMediation=add2ndMediation))
equation=addLine(equation,makeEquation3(X,M,Y,add2ndMediation=add2ndMediation))
}
#'Add `+` mark to string
#'
#'@param x A string
#'@param ... one or more R objects, to be converted to character vectors.
addPlus=function(x,...){
if(x=="") x<-paste0(...)
else x<-paste0(x,"+",...)
x
}
(countX=length(X))
(countM=length(M))
(countY=length(Y))
if(countX*countM*countY==0) {
equation=" # You need at least one dependent variable(s),\n#one mediation variable(s) and one independent variable(s)."
} else{
equation=paste0("# Mediation Effect\n",makeEquation2(X,M,Y))
equation=addLine(equation,makeEquation1(X,M,add2ndMediation=add2ndMediation))
equation=addLine(equation,makeEquation3(X,M,Y,add2ndMediation=add2ndMediation))
}
equation
library(semMediation)
makeEquation(X="X",M=c("M1","M2"),Y="Y",add2ndMediation = FALSE)
makeEquation3(X="X",M=c("M1","M2"),Y="Y",add2ndMediation = FALSE)
(countX=length(X))
(countM=length(M))
(countY=length(Y))
equation=""
ind=c()
for(k in 1:countY){
for(i in 1:countX) {
for(j in 1:countM) {
noA=(i-1)*countM+j
no=noA+(k-1)*countX*countM
b=((noA-1)%/%countX)+1+(k-1)*countM
#temp=paste0("ind",no,":=a",noA,"*b",b)
#equation=addLine(equation,temp)
ind=c(ind,paste0("a",noA,"*b",b))
temp=paste0("ind",length(ind),":=",ind[length(ind)])
equation=addLine(equation,temp)
}
}
}
equation
secondInd=c()
if(add2ndMediation &(countM>1)){
for(k in 1:countY){
for(j in 2:countM){
equationa=""
for(i in 1:countX){
start=(j-2)*countX
tempa=paste0("a",start+i,"*d",j-1,"*b",j+(k-1)*countM)
equationa=addPlus(equationa,tempa)
}
#temp=paste0("secondInd",(j-1)+(k-1)*(countM-1),":=",equationa)
secondInd=c(secondInd,equationa)
temp=paste0("secondInd",length(secondInd),":=",secondInd[length(secondInd)])
equation=addLine(equation,temp)
}
}
}
equation
thirdInd=c()
if(add2ndMediation &(countM>2)){
for(k in 1:countY){
for(j in 3:countM){
equationa=""
for(i in 1:countX){
start=(j-3)*countX
tempa=paste0("a",start+i,"*d",j-2,"*d",j-1,"*b",j+(k-1)*countM)
equationa=addPlus(equationa,tempa)
}
#temp=paste0("thirdInd",j-2,":=",equationa)
#temp=paste0("thirdInd",(j-2)+(k-1)*(countM-2),":=",equationa)
thirdInd=c(thirdInd,equationa)
temp=paste0("thirdInd",length(thirdInd),":=",thirdInd[length(thirdInd)])
equation=addLine(equation,temp)
}
}
}
equation
## total effect
total=c()
for(k in 1:countY){
# direct effect
direct=paste0("c",seq(1:countX)+(k-1)*countX)
Effect=Reduce(addPlus,direct)
# indirect effect
if(countM>=1){
start=1+(k-1)*length(ind)/countY
end=start+length(ind)/countY-1
indirectEffect=Reduce(addPlus,ind[start:end])
Effect=addPlus(Effect,indirectEffect)
}
# secondIndirect
if(countM>=2){
start=1+(k-1)*length(secondInd)/countY
end=start+length(secondInd)/countY-1
secondIndEffect=Reduce(addPlus,secondInd[start:end])
if(add2ndMediation) Effect=addPlus(Effect,secondIndEffect)
}
# thirdIndirect
if(countM>=3){
start=1+(k-1)*length(thirdInd)/countY
end=start+length(thirdInd)/countY-1
thirdIndEffect=Reduce(addPlus,thirdInd[start:end])
if(add2ndMediation) Effect=addPlus(Effect,thirdIndEffect)
}
temp=paste0("total",k,":=",Effect)
equation=addLine(equation,temp)
}
equation
library(semMediation)
makeEquation(X="X",M=c("M1","M2"),Y="Y")
makeEquation(X="X",M=c("M1","M2"),Y="Y",add2ndMediation = FALSE)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(ggiraphExtra)
disaster=read.csv("./R/disater.csv",stringsAsFactors = FALSE)
disaster=read.csv("./inst/pmacro/data/disater.csv",stringsAsFactors = FALSE)
disaster=read.csv("./inst/pmacro/data/disaster.csv",stringsAsFactors = FALSE)
disaster
fit=lm(justify~frame*skeptic,data=disaster)
fit
summary(fit)
ggPredict(fit)
head(disaster)
disaster$frame=factor(disaster$frame)
fit=lm(justify~frame*skeptic,data=disaster)
summary(fit)
ggPredict(fit)
library(semMediation)
interactStr(LETTERS[1])
interactStr(LETTERS[1:2])
interactStr(LETTERS[1:2],skip=TRUE)
statisticalDiagram(4)
drawtext(c(0,0.3),lab="C1")
drawtext(c(0,0.3),radx=0.1,rady=0.6,lab="C1")
drawtext(c(0,0.3),radx=0.1,rady=0.04,lab="C1",latent=FALSE)
drawtext(c(0,0.3),lab="C1")
statisticalDiagram(4)
drawtext(c(0,0.3),radx=0.1,rady=0.04,lab="C1",latent=FALSE)
drawtext(c(0,0.2),radx=0.1,rady=0.04,lab="C1",latent=FALSE)
