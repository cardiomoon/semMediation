ylab="Conditional effect of disaster frame",
xlab="Climate Change Skepticism (W)")
points(skeptic,llci,lwd=2,lty=2,type="l")
points(skeptic,ulci,lwd=2,lty=2,type="l")
abline(h=0,untf=FALSE,lty=3,lwd=1)
abline(v=1.171,untf=FALSE,lty=3,lwd=1)
abline(v=3.934,untf=FALSE,lty=3,lwd=1)
text(1.171,-1,"1.171",cex=0.8)
text(3.934,-1,"3.934",cex=0.8)
glbwarm
glbwarm=read.csv("data/glbwarm.csv",stringsAsFactors = FALSE)
glbwarm=read.csv("inst/pmacro/data/glbwarm.csv",stringsAsFactors = FALSE)
glbwarm
model=lm(govact~negemot,data=glbwarm)
summary(model)
library(ggplot2)
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_point()+geom_smooth()
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_point()+geom_smooth(method="lm")
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_count()+geom_smooth(method="lm")
model1=lm(govact~sex,data=glbwarm)
summary(model1)
ggplot(data=glbwarm,aes(x=sex,y=govact))+geom_count()+geom_smooth(method="lm")
summary(model1)
glbwarm
str(glbwarm)
model2=lm(govact~.-partyid,data=glbwarm)
summary(model2)
pmi=read.csv("inst/pmacro/data/pmi.csv",stringsAsFactors = FALSE)
pmi
str(pmi)
library(semMediation)
runApp('inst/pmacro')
str(pmacro)
list.files(path="data","*.csv")
list.files(path="inst/pmacro/data","*.csv")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
strsplit(dataFiles,".")
library(stringr)
str_view(dataFiles,"*.")
dataFiles
str_view(dataFiles,"*.")
str_view(dataFiles,"*^.")
str_view(dataFiles,"*~.")
dataFiles
str_view(dataFiles,"^*")
str_view(dataFiles,"^*.")
str_view(dataFiles,"^.*")
str_view(dataFiles,"^.*[^\.]")
str_view(dataFiles,"^.*[^\\.]")
str_view(dataFiles,"^")
str_view(dataFiles,"[^.]")
str_view(dataFiles,"[^.]*")
strsplit(dataFiles,".")
str_view(dataFiles,"[^.]*")
str_extract_all(dataFiles,"[^.]*")
str_extract(dataFiles,"[^.]*")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
dataNames=str_extract(dataFiles,"[^.]*")
for(i in seq_along(dataNames)){
data=read.csv(dataFiles[i],stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
for(i in seq_along(dataNames)){
data=read.csv(paste0("inst/pmacro/data/",dataFiles[i]),stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
teams
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
dataNames=str_extract(dataFiles,"[^.]*")
for(i in seq_along(dataNames)){
data=read.csv(paste0("inst/pmacro/data/",dataFiles[i]),stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
teams
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
pmacro$M
pmacro$modName
pmacr$X
pmacro$X
pmacro$Y
pmacro$M
pmacro$modName
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
textInput3
actionButton
actionBttn
selectInput3
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
actionInput <- function(id) {
ns <- NS(id)
tagList(
textInput(ns("text"), label=NULL, value=id),
actionButton(ns("button"), "OK")
)
}
action <- function(input, output, session) {
eventReactive(input$button, {
return(input$text)
})
}
ui <- fluidPage(fluidRow(column(4, actionInput("b1")),
column(4, actionInput("b2")),
column(4, uiOutput("result"))))
server <-function(input, output, session) {
b1 <- callModule(action, "b1")
observeEvent(b1(), {
output$result = renderText(b1())
})
b2 <- callModule(action, "b2")
observeEvent(b2(), {
output$result = renderText(b2())
})
}
shinyApp(ui = ui, server = server)
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
# UI part of the module
ab_moduleUI <- function(id){
ns <- NS(id)
tagList(
fluidRow(
actionButton(ns("btn"), paste("ActionButton", id, sep="-")),
textOutput(ns("txt"))
)
)
}
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
runApp('inst/pmacro')
runApp('inst/pmacro')
# UI part of the module
ab_moduleUI <- function(id){
ns <- NS(id)
tagList(
fluidRow(
actionButton(ns("btn"), paste("ActionButton", id, sep="-")),
textOutput(ns("txt"))
)
)
}
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
pmacro$modName[40]
select=40
name=unlist(strsplit(pmacro$modName[i],":"))
name
name=unlist(strsplit(pmacro$modName[select],":"))
name
sites=unlist(strsplit(pmacro$modSite[select],":"))
x=strsplit(sites,",")
pos=as.numeric(unlist(strsplit(pmacro$pos[select],",")))
pmacro$modSite[select]
sites=unlist(strsplit(pmacro$modSite[select],":"))
sites
sites=strsplit(pmacro$modSite[select],":")
sites
sites
str(sites)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
select=2
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
str(sites)
moderator=list(name=name,site=sites)
str(moderator)
model=modmedEquation(X="X",Y="Y",moderator=moderator)
cat(model)
select=40
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
str(sites)
moderator=list(name=name,site=sites)
model=modmedEquation(X="X",Y="Y",moderator=moderator)
cat(model)
pmacro$M
runApp('inst/pmacro')
select=2
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram2(xb=TRUE,labels=labels)
moderator=list(name="Z1",label="Time Spent\n with Alex",pos=3,
site=list(c("a","b","c")),latent=FALSE)
conceptDiagram2(moderator=moderator,labels=labels)
moderator=list(name=c("Z1","Z2"),label=c("Time Spent\n with Alex","Z2label"),pos=c(3,3),
site=list(c("a","b","c"),c("b","c")),latent=c(FALSE,FALSE))
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
select=40
if(pmacro$modName[select]!=""){
name=unlist(strsplit(pmacro$modName[select],":"))
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
sites=strsplit(pmacro$modSite[select],":")
moderator=list(name=modname,site=sites)
str(moderator)
}
name=unlist(strsplit(pmacro$modName[select],":"))
sites=strsplit(pmacro$modSite[select],":")
sites
sites=unlist(strsplit(pmacro$modSite[select],":"))
sites
sites=unlist(strsplit(sites))
sites=unlist(strsplit(sites,","))
sites
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
sites=list()
for(i in 1:length(temp)){
sites[[i]]=unlist(strsplit(temp[i],","))
}
sites
moderator=list(name=modname,site=sites)
str(moderator)
else model=modmedEquation(X=input$X,M=input$M,Y=input$Y,moderator=moderator)
if(pmacro$M[select]=="") model=modmedEquation(X=input$X,Y=input$Y,moderator=moderator)
else model=modmedEquation(X=input$X,M=input$M,Y=input$Y,moderator=moderator)
if(pmacro$M[select]==""){
model=modmedEquation(X=input$X,Y=input$Y,moderator=moderator)
} else {
model=modmedEquation(X=input$X,M=input$M,Y=input$Y,moderator=moderator)
}
runApp('inst/pmacro')
runApp('inst/pmacro')
select=40
name=unlist(strsplit(pmacro$modName[select],":"))
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
sites=list()
for(i in 1:length(temp)){
sites[[i]]=unlist(strsplit(temp[i],","))
}
sites
moderator=list(name=modname,site=sites)
select=40
name=unlist(strsplit(pmacro$modName[select],":"))
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
sites=list()
for(i in 1:length(temp)){
sites[[i]]=unlist(strsplit(temp[i],","))
}
sites
moderator=list(name=modname,site=sites)
str(moderator)
pmacro$M[select]
model=modmedEquation(X="X",M="M",Y="Y",moderator=moderator)
model
moderator
name=unlist(strsplit(pmacro$modName[select],":"))
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
sites=list()
for(i in 1:length(temp)){
sites[[i]]=unlist(strsplit(temp[i],","))
}
sites
moderator=list(name=modname,site=sites)
str(moderator)
name=unlist(strsplit(pmacro$modName[select],":"))
name
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
modname
name=unlist(strsplit(pmacro$modName[select],":"))
name
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
modname
name=unlist(strsplit(pmacro$modName[select],":"))
runApp('inst/pmacro')
select=40
name=unlist(strsplit(pmacro$modName[select],":"))
name
modname=c()
for(i in 1:length(name)){
modname=c(modname,input[[name[i]]])
}
modname
temp=unlist(strsplit(pmacro$modSite[select],":"))
temp
sites=list()
for(i in 1:length(temp)){
sites[[i]]=unlist(strsplit(temp[i],","))
}
sites
moderator=list(name=name,site=sites)
str(moderator)
model=modmedEquation(X="X",M="M",Y="Y",moderator=moderator)
model
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
editData::editFiles
editData::editFiles()
editData::editFiles
library(semMediation)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
runPmacro()
