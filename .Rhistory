label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
statisticalDiagram(1)
statisticalDiagram(2)
no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
# no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
load("~/Documents/ownCloud/Documents/semMediation/data/nodes.rda")
load("~/Documents/ownCloud/Documents/semMediation/data/arrows.rda")
statisticalDiagram(2)
library(semMediation)
runApp('inst/pmacro')
statisticalDiagram(3)
#'Draw statistical diagram
#'@param no process macro model number
#'@param radx horizontal radius of the box.
#'@param rady vertical radius of the box.
#'@param xmargin horizontal margin of plot
#'@param arrowlabel logical whether or not draw arrowlabel
#'@export
#'@examples
#'statisticalDiagram(3)
statisticalDiagram=function(no=1,radx=0.10,rady=0.04,xmargin=0.01,arrowlabel=TRUE,labels=list()){
# no=2;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;labels=list()
nodes=nodes[nodes$no==no, ]
arrows=arrows[arrows$no==no,]
openplotmat()
for(i in 1:nrow(arrows)){
#cat("i=",i,"\n")
label=ifelse(arrowlabel,arrows$name[i],"")
myarrow2(from=arrows$start[i],to=arrows$end[i],
label=label,no=no,xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i])
}
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
statisticalDiagram(3)
library(semMediation)
statisticalDiagram(76)
labels=list(X="age",Mi="educ",Y="interest",W="male")
grep("MiX","Mi")
grep("Mi","MiX")
LETTERS[1:5]
paste0(LETTERS[1:5],collape=":")
paste0(LETTERS[1:5],collapse=":")
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
}
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
findName(labels,name)
names(labels)
length(labels)
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
labels[[name]]
temp=c()
length(labels)
i=1
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
temp
grep(names(labels)[i],name)
i=2
grep(names(labels)[i],name)
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
temp
i=3
grep(names(labels)[i],name)
if(grep(names(labels)[i],name)) temp=c(temp,names(labels)[i])
i=3
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
labels[[name]]
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
}
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
length(labels)
names(labels)
findName(labels,name)
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,names(labels)[i])
temp
}
temp
#'convert name with list
#'@param labels A named list
#'@param name A name to look for
findName=function(labels,name="MiX"){
labels[[name]]
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,labels[[names(labels[i])]])
temp
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
result
}
labels=list(X="age",Mi="educ",Y="interest",W="male")
name="MiX"
length(labels)
names(labels)
findName(labels,name)
library(semMediation)
runApp('inst/pmacro')
statisticalDiagram(1)
labels=list()
labels
name="X"
if(!is.null(labels[[name]])) {
result=labels[[name]]
} else{
temp=c()
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0) temp=c(temp,labels[[names(labels[i])]])
temp
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
}
length(labels)
library(semMediation)
statisticalDiagram(1)
statisticalDiagram(76)
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
caskets=read.csv("./R/caskets.csv",stringsAsFactors = FALSE)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit=sem(model=model,data= caskets )
summary(fit)
reliablityTable2(fit)
require(semMediation)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
reliablityTable2(fit)
reliabilityTable2(fit)
reliabilityTable2(fit)
reliabilityTable(fit)
fit
reliabilityTable(fit)
reliablityTable2(fit)
reliabilityTable2(fit)
discriminantValidityTable2(fit)
discriminantValidityTable2(fit)
runApp('inst/pmacro')
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=fit2alpha(fit)
df2flextable(result)
result=fit2alpha(fit)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
summary(fit)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
require(lavaan)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=fit2alpha(fit)
df2flextable(result)
estimatesTable2(fit)
reliabilityTable2(fit)
result=tryCatch(semTools::reliability(fit),error= function(e) "error")
result
require(semTools)
reliabilityTable2(fit)
discriminantValidityTable2(fit)
result=tryCatch(semTools::reliability(fit),error= function(e) "error")
result
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable2(fit)
reliability(fit)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
require(lavaan)
require(semTools)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable2(fit)
estimatesTable2(fit,digits=3)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
require(semMediation)
require(lavaan)
require(semTools)
caskets=read.csv("./inst/pmacro/data/caskets.csv",stringsAsFactors = FALSE)
model= "policy ~ c1*age+c2*educ+c3*age:educ
educ ~ educ.mean*1
educ ~~ educ.var*educ"
fit=sem(model=model,data= caskets )
summary(fit)
fit
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
library(semMediation)
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
library(semMediation)
estimatesTable2(fit,digits=3)
estimatesTable(fit,digits=3)
estimatesTable2(fit,digits=3)
runApp('inst/pmacro')
nodes
arrows
arrows[arrows$no==76,]
estimatesTable(fit,digits=3)
devtools::document()
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
devtools::document()
devtools::check()
devtools::check()
library(semMediation)
statisticalDiagram(3)
runApp('inst/pmacro')
devtools::document()
devtools::check()
library(semMediation)
library(semMediation)
pmacro?
pmacro
?pmacro
devtools::document()
devtools::check()
library(diagram)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+label.pos[i]/10*(to-from)
textplain(mid=mid,lab=label,adj=c(1,-0.5))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
openplotmat()
start=c(0.1,0.2)
end=c(0.7,0.7)
myarrow(start,end)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+label.pos[i]/10*(to-from)
textplain(mid=mid,lab=labelpos[i],adj=c(1,-0.5))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
openplotmat()
start=c(0.1,0.2)
end=c(0.7,0.7)
myarrow(start,end)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+labelpos[i]/10*(to-from)
textplain(mid=mid,lab=labelpos[i],adj=c(1,-0.5))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
openplotmat()
start=c(0.1,0.2)
end=c(0.7,0.7)
myarrow(start,end)
myarrow(end,start)
openplotmat()
start=c(0.1,0.2)
end=c(0.7,0.7)
myarrow(end,start)
openplotmat()
start=c(0.1,0.7)
end=c(0.7,0.1)
myarrow(start,end)
openplotmat()
start=c(0.1,0.1)
end=c(0.7,0.7)
myarrow(start,end)
start=c(0.7,0.7)
end=c(0.1,0.1)
myarrow(start,end)
openplotmat()
start=c(0.7,0.7)
end=c(0.1,0.1)
myarrow(start,end)
openplotmat()
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+labelpos[i]/10*(to-from)
textplain(mid=mid,lab=labelpos[i],adj=c(1,-0.5))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=1,arr.type="triangle",...)
}
openplotmat()
start=c(0.1,0.1)
end=c(0.7,0.7)
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+labelpos[i]/10*(to-from)
textplain(mid=mid,lab=labelpos[i],adj=c(1,-1))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=1,arr.type="triangle",...)
}
openplotmat()
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end)
myarrow=function(from,to,lwd=1,adjust=1,label.pos=0.5,arr.pos=NULL,...){
labelpos=c(1,3,5,7,9)
for(i in seq_along(labelpos)){
mid=from+labelpos[i]/10*(to-from)
textplain(mid=mid,lab=labelpos[i],adj=c(1,-0.5))
}
straightarrow(from=from,to=to,lwd=lwd,arr.pos=1,arr.type="triangle",...)
}
openplotmat()
start=c(0.1,0.1)
end=c(0.7,0.7)
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end)
library(semMediation)
openplotmat()
start=c(0.1,0.1)
end=c(0.7,0.7)
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end,lty="dotted")
myarrow(start,end,lty="dotted",arr.length=0.2)
openplotmat()
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end,lty="dotted",arr.length=0.2)
openplotmat()
start=c(0.7,0.1)
end=c(0.1,0.7)
myarrow(start,end,lty=1,arr.length=0.2)
library(semMediation)
shiny::runApp('inst/pmacro')
library(semMediation)
runApp()
runApp()
library(semMediation)
runApp()
runApp()
runApp()
runApp()
