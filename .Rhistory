}
df$hjust[df$x<relpos(p,c(0.4,0))[1]]=-0.02
# print(slope)
# print(df)
p<-p+
annotate("segment",x=df$x,y=df$y,
xend=df$x,yend=df$yend,
arrow=arrow(angle = 15,length=unit(0.15,"inches"),
type="closed"))+
annotate("text",x=df$x,y=ifelse(df$end*slope>0,df$yend,df$y),label=df$label,hjust=df$hjust,vjust=df$vjust,parse=TRUE)
}
}
p
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
system("grep -l 'regEquation' *" )
system("grep  'regEquation' *" )
system("grep")
devtools::document()
devtools::check()
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
runApp()
runApp()
runApp()
library(semMediation)
runApp()
runApp()
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
library(semMediation)
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param moderator moderator
#' @param covar covariates
#' @export
#' @examples
#' X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
#' regEquation(X,M,Y,moderator)
#' covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#' regEquation(X,M,Y,moderator,covar)
regEquation=function(X="X",M=c("M1","M2"),Y="Y",moderator=list(),covar=list()){
(XM=moderator$name[str_detect2(moderator$site,"a")])
(MY=moderator$name[str_detect2(moderator$site,"b")])
(XY=moderator$name[str_detect2(moderator$site,"c")])
if(length(XY)>0) {
temp=c()
for(i in 1:length(XY)){
temp=c(temp,paste0(X,"*",XY[i]))
}
equation=paste0(temp,collapse="+")
equation=paste("Y","~",equation)
} else{
equation=paste0(Y,"~",X)
}
equation=addCovarEquation(equation,covar=covar,prefix=NULL)
equation
}
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
library(semMediation)
#' @param M A character vectors indicating mediators
#' @param Y A character vectors indicating dependent variables
#' @param moderator moderator
#' @param covar covariates
#' @export
#' @examples
#' X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
#' regEquation(X,M,Y,moderator)
#' covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#' regEquation(X,M,Y,moderator,covar)
regEquation=function(X="X",M=c("M1","M2"),Y="Y",moderator=list(),covar=list()){
(XM=moderator$name[str_detect2(moderator$site,"a")])
(MY=moderator$name[str_detect2(moderator$site,"b")])
(XY=moderator$name[str_detect2(moderator$site,"c")])
if(length(XY)>0) {
temp=c()
for(i in 1:length(XY)){
temp=c(temp,paste0(X,"*",XY[i]))
}
equation=paste0(temp,collapse="+")
equation=paste("Y","~",equation)
} else{
equation=paste0(Y,"~",X)
}
equation=addCovarEquation(equation,covar=covar,prefix=NULL)
equation
}
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
library(semMediation)
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
regEquation(X,M,Y,moderator,covar)
regEquation()
library(semMediation)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
regEquation(X,M,Y,moderator,covar)
runApp()
runApp()
library(semMediation)
runApp()
runApp()
fit=lm(mpg~wt*am+disp+cyl+drat,data=mtcars)
str(fit)
fit$terms
deparse(fit$terms)
fit$call
str(fit)
attr(fit,"class")
class(fit)
library(semMediation)
fit=lm(mpg~wt*am+disp+cyl+drat,data=mtcars)
condEffect(fit,pred="wt",modx="am")
condEffect(fit,pred="wt",modx="am",switchVars=TRUE)
fit=lm(mpg~wt*hp+disp+cyl+drat,data=mtcars)
condEffect(fit,pred="wt",modx="hp")
condEffect(fit,pred="wt",modx="hp",show.Effect=FALSE)
condEffect(fit,pred="wt",modx="hp",switchVars=TRUE)
condEffect(fit,pred="wt",modx="hp",modx.values=c(100,150,200))
condEffect(fit,pred="wt",modx="hp",probs=c(0.16,0.4,0.6,0.84))
fit=lm(mpg~wt*am+disp+cyl+drat,data=mtcars)
condEffect(fit,pred="wt",modx="am")
condEffect(fit,pred="wt",modx="am",switchVars=TRUE)
condEffect(fit,pred="wt",modx="am")
shiny::runApp('inst/pmacro')
library(semMediation)
fit=lm(mpg~wt*am+disp+cyl+drat,data=mtcars)
condEffect(fit,pred="wt",modx="am")
condEffect(fit,pred="wt",modx="am",switchVars=TRUE)
fit=lm(mpg~wt*hp+disp+cyl+drat,data=mtcars)
condEffect(fit,pred="wt",modx="hp")
condEffect(fit,pred="wt",modx="hp",show.Effect=FALSE)
condEffect(fit,pred="wt",modx="hp",switchVars=TRUE)
condEffect(fit,pred="wt",modx="hp",modx.values=c(100,150,200))
condEffect(fit,pred="wt",modx="hp",probs=c(0.16,0.4,0.6,0.84))
#'@examples
#'fit=lm(mpg~wt*am+disp+cyl+drat,data=mtcars)
#'condEffect(fit,pred="wt",modx="am")
#'condEffect(fit,pred="wt",modx="am",switchVars=TRUE)
#'fit=lm(mpg~wt*hp+disp+cyl+drat,data=mtcars)
#'condEffect(fit,pred="wt",modx="hp")
#'condEffect(fit,pred="wt",modx="hp",show.Effect=FALSE)
#'condEffect(fit,pred="wt",modx="hp",switchVars=TRUE)
#'condEffect(fit,pred="wt",modx="hp",modx.values=c(100,150,200))
#'condEffect(fit,pred="wt",modx="hp",probs=c(0.16,0.4,0.6,0.84))
condEffect=function(fit,pred,modx,modx.values=NULL,
probs=NULL,digits=1,show.Effect=TRUE,switchVars=FALSE,
max.ylev=6,arrowlength=0.05,...){
df=fit$model
if(switchVars){
temp<-pred
pred<-modx
modx<-temp
}
if(!is.null(probs)){
modValues = quantile(df[[modx]],probs)
} else if(!is.null(modx.values)){
modValues=modx.values
} else if(length(unique(df[[modx]]))>max.ylev) {
modValues=round(mean(df[[modx]])+c(-1,0,1)*sd(df[[modx]]),digits)
} else{
modValues=sort(unique(df[[modx]]))
}
count=length(modValues)
temp=paste0("interact_plot(fit,pred=",pred,",modx=",modx,
",modx.values=",paste0("c(",paste0(modValues,collapse=","),")"),",...)")
# print(temp)
p<-eval(parse(text=temp))
if(show.Effect){
intercept=0
if(ncol(df)>3){
for(i in 4:ncol(df)) {
intercept=intercept+mean(df[[i]])*fit$coef[i]
}
}
myfit=lapply(1:count,function(i){
temp=deparse(fit$terms)
temp
if(switchVars){
temp1=str_replace(temp,modx,"temp")
temp1=str_replace(temp1,pred,modx)
temp1=str_replace(temp1,"temp",pred)
}
temp1=str_replace(temp,modx,paste0("I(",modx,"- modValues[",i,"])"))
# cat("temp1=",temp1,"\n")
temp2=paste0(class(fit),"(",temp1,",data=df)")
eval(parse(text=temp2))
})
fun=lapply(1:count,function(i){
function(x) {myfit[[i]]$coef[1]+intercept+
myfit[[i]]$coef[2+ifelse(switchVars,1,0)]*x}
})
midpos=relpos(p,c(0.5,0.5))
if(count>2){
startpos=relpos(p,c(0,0))
minx=startpos[1]
miny=startpos[2]
endpos=relpos(p,c(1,1))
maxx=endpos[1]
maxy=endpos[2]
xlength=(maxx-minx)*arrowlength
ylength=(maxy-miny)*arrowlength
endx=minx+(maxx-minx)*(1:count)/(count+1)
endy=unlist(lapply(1:count,function(i) {fun[[i]](endx[i])}))
startx=endx+ifelse(endx>=midpos[1],-1,1)*xlength
starty=endy+ifelse(endy>=midpos[2],1,-1)*ylength
for(i in 1:count){
label=paste0("italic(theta)[italic(X) %->% italic(Y) ] ==",
round(myfit[[i]]$coef[2],3),
" (italic(W) ==",round(modValues[i],1),")")
hjust=ifelse(endx[i]>=midpos[1],1.02,-0.02)
p<-p+
annotate("text",x=startx[i],y=starty[i],label=label,parse=TRUE,
hjust=hjust)+
annotate("segment",x=startx[i],y=starty[i],
xend=endx[i],yend=endy[i],
arrow=arrow(angle = 15,length=unit(0.15,"inches"),
type="closed"))
}
} else{
if(is.null(probs)) probs=c(0.16,0.5,0.84)
xvalues=quantile(df[[pred]],probs)
yhat0=fun[[1]](xvalues)
yhat1=fun[[2]](xvalues)
myfit=lapply(1:length(xvalues),function(i){
temp=deparse(fit$terms)
temp
if(switchVars){
temp1=str_replace(temp,modx,"temp")
temp1=str_replace(temp1,pred,modx)
temp1=str_replace(temp1,"temp",pred)
}
temp1=str_replace(temp,pred,paste0("I(",pred,"-", xvalues[i],")"))
# cat("temp1=",temp1,"\n")
temp2=paste0(class(fit),"(",temp1,",data=df)")
eval(parse(text=temp2))
})
labels<-end<-vjust<-c()
for(i in 1:length(xvalues)){
temp=paste0("list(italic(theta)[italic(X) %->% italic(Y) ] ==",
round(myfit[[i]]$coef[3],3),
" (italic(W) ==",round(xvalues[i],1),")",
",p==",round(summary(myfit[[i]])$coef[3,4],3),")")
labels=c(labels,temp)
# print(myfit[[i]]$coef)
end=c(end,ifelse(myfit[[i]]$coef[2]>=0,1,-1))
vjust=c(vjust,ifelse(myfit[[i]]$coef[3]>=0,-0.02,1.02))
}
labels
slope=ifelse(fit$coef[2]>=0,1,-1)
df=data.frame(x=xvalues,y=yhat0,yend=yhat1,label=labels,end=end,vjust=vjust)
if(slope>0){
df$hjust=ifelse(df$vjust>0,-0.02,1.02)
} else{
df$hjust=ifelse(df$vjust>0,1.02,-0.02)
}
df$hjust[df$x<relpos(p,c(0.4,0))[1]]=-0.02
# print(slope)
# print(df)
p<-p+
annotate("segment",x=df$x,y=df$y,
xend=df$x,yend=df$yend,
arrow=arrow(angle = 15,length=unit(0.15,"inches"),
type="closed"))+
annotate("text",x=df$x,y=ifelse(df$end*slope>0,df$yend,df$y),label=df$label,hjust=df$hjust,vjust=df$vjust,parse=TRUE)
}
}
p
}
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
regEquation(X,M,Y,moderator,covar=covar)
equation="Y~X"
covar=list(nae=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
prefix<-NULL
temp1=unlist(strsplit(equation,"\n"))
temp1
temp2=strsplit(temp1,"~")
temp2
result=list()
start=1
for(i in 1:length(temp2)){
var=temp2[[i]][1]
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
if(is.null(temp3)){
result[[i]]=paste(var,"~",temp2[[i]][2])
} else {
temp4=paste(temp2[[i]][2],"+",paste(temp3,collapse=" + "))
result[[i]]=paste(var,"~",temp4)
start=start+length(temp3)
}
}
#' Seek var form covariates
#' @param covar A list of covariates
#' @param var A name of variable to look for
#' @param prefix A prefix
#' @param start A start number
seekVar=function(covar=list(),var,prefix="h",start=1){
temp=c()
if(length(covar$name)>0){
j=start
for(i in 1:length(covar$name)){
# if(!is.null(covar$label[i])) var<-covar$label[i]
if(var %in% covar$site[[i]]){
if(!is.null(prefix)) {
temp=c(temp,paste0(prefix,j,"*",covar$name[i]))
} else{
temp=c(temp,covar$name[i])
}
j=j+1
}
}
}
temp
}
for(i in 1:length(temp2)){
var=temp2[[i]][1]
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
if(is.null(temp3)){
result[[i]]=paste(var,"~",temp2[[i]][2])
} else {
temp4=paste(temp2[[i]][2],"+",paste(temp3,collapse=" + "))
result[[i]]=paste(var,"~",temp4)
start=start+length(temp3)
}
}
paste(unlist(result),collapse="\n")
temp2
start=1
i=1
var=temp2[[i]][1]
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
temp3
temp2
var=temp2[[i]][1]
var
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
temp3
covar
library(semMediation)
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
regEquation(X,M,Y,moderator,covar=covar)
(XM=moderator$name[str_detect2(moderator$site,"a")])
(MY=moderator$name[str_detect2(moderator$site,"b")])
(XY=moderator$name[str_detect2(moderator$site,"c")])
temp=c()
for(i in 1:length(XY)){
temp=c(temp,paste0(X,"*",XY[i]))
}
equation=paste0(temp,collapse="+")
equation=paste(Y,"~",equation)
equation
equation=addCovarEquation(equation,covar=covar,prefix=NULL)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
var="Y"
seekVar(covar,var)
seekVar(covar,var,prefix=NULL)
var="M"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
var="M"
seekVar(covar,var,prefix=NULL)
equation="Y ~ X*W"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
addCovarEquation(equation,covar)
#' Add covariates to equation
#' @param equation The equation
#' @param covar A list
#' @param prefix prefix
#' @examples
#' equation="Y ~ X*W"
#' covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#' addCovarEquation(equation,covar)
addCovarEquation=function(equation,covar=list(),prefix="h"){
temp1=unlist(strsplit(equation,"\n"))
temp1
temp2=strsplit(temp1,"~")
temp2
result=list()
start=1
for(i in 1:length(temp2)){
var=temp2[[i]][1]
var
covar
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
temp3
if(is.null(temp3)){
result[[i]]=paste(var,"~",temp2[[i]][2])
} else {
temp4=paste(temp2[[i]][2],"+",paste(temp3,collapse=" + "))
result[[i]]=paste(var,"~",temp4)
start=start+length(temp3)
}
}
paste(unlist(result),collapse="\n")
}
equation="Y ~ X*W"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
addCovarEquation(equation,covar)
equation="Y ~ X*W"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
addCovarEquation(equation,covar=covar)
equation="Y ~ X*W"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
prefix="h"
temp1=unlist(strsplit(equation,"\n"))
temp1
temp2=strsplit(temp1,"~")
temp2
result=list()
start=1
i=1
var=temp2[[i]][1]
var
#' Add covariates to equation
#' @param equation The equation
#' @param covar A list
#' @param prefix prefix
#' @examples
#' equation="Y ~ X*W"
#' covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
#' prefix="h"
#' addCovarEquation(equation,covar=covar)
addCovarEquation=function(equation,covar=list(),prefix="h"){
temp1=unlist(strsplit(equation,"\n"))
temp1
temp2=strsplit(temp1,"~")
temp2
result=list()
start=1
i=1
for(i in 1:length(temp2)){
var=temp2[[i]][1]
var=str_trim(var,side="both")
covar
temp3=seekVar(covar=covar,var=var,prefix=prefix,start=start)
temp3
if(is.null(temp3)){
result[[i]]=paste(var,"~",temp2[[i]][2])
} else {
temp4=paste(temp2[[i]][2],"+",paste(temp3,collapse=" + "))
result[[i]]=paste(var,"~",temp4)
start=start+length(temp3)
}
}
paste(unlist(result),collapse="\n")
}
equation="Y ~ X*W"
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
prefix="h"
addCovarEquation(equation,covar=covar)
addCovarEquation(equation,covar=covar,prefix=NULL)
library(semMediation)
X="X";M=NULL;Y="Y"; moderator=list(name="W",site=list("c"))
regEquation(X,M,Y,moderator)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
regEquation(X,M,Y,moderator,covar=covar)
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
