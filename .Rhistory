} else{
name=list()
sites=list()
moderator=list()
if(pmacro$modName[i]!=""){
name=unlist(strsplit(pmacro$modName[i],":"))
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
if(length(pos)==0) pos=3
moderator=list(name=name,label=name,site=x,latent=latent,pos=pos)
moderator
}
M=pmacro$M[i]
if(M=="") M=c()
conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
}
no=74
i=which(pmacro$no==no)
name=list()
sites=list()
moderator=list()
if(pmacro$modName[i]!=""){
name=unlist(strsplit(pmacro$modName[i],":"))
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
if(length(pos)==0) pos=3
moderator=list(name=name,label=name,site=x,latent=latent,pos=pos)
moderator
}
M=pmacro$M[i]
if(M=="") M=c()
conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
conceptDiagram2(xb=TRUE,labels=name)
name=unlist(strsplit(pmacro$modName[i],":"))
name
conceptDiagram2(xb=TRUE,labels=name)
conceptDiagram2(xb=TRUE)
pmacroModel=function(no=1){
i=which(pmacro$no==no)
if(length(i)<1) {
cat("Currently, Model number ",no," is not supported.")
} else{
name=list()
sites=list()
moderator=list()
if(pmacro$modName[i]!=""){
name=unlist(strsplit(pmacro$modName[i],":"))
name
sites=unlist(strsplit(pmacro$modSite[i],":"))
x=strsplit(sites,",")
latent=rep(FALSE,length(name))
pos=as.numeric(unlist(strsplit(pmacro$pos[i],",")))
if(length(pos)==0) pos=3
moderator=list(name=name,label=name,site=x,latent=latent,pos=pos)
moderator
}
M=pmacro$M[i]
if(M=="") M=c()
if(no==74) conceptDiagram2(xb=TRUE)
else conceptDiagram2(X=pmacro$X[i],M=M,Y=pmacro$Y[i],moderator = moderator)
}
}
pmacroModel(74)
pmacroModel(75)
pmacroModel(74)
library(semMediation)
devtools::use_vignette("processMacro")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(semMediation)
no=nrow(pmacro)
for(i in 1:no){
cat("Model ",pmacro$no[i])
pmacroModel(pmacro$no[i])
}
no=nrow(pmacro)
for(i in 1:no){
cat("Model ",pmacro$no[i])
}
for(i in 1:no){
cat("Model",pmacro$no[i])
}
cat("Model",pmacro$no[i],"\n")
cat("Model",pmacro$no[i],"\n")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
no=nrow(pmacro)
no
no=nrow(pmacro)
for(i in 1:20){
cat("Model",pmacro$no[i],"\n")
pmacroModel(pmacro$no[i])
}
pmacroModel(17)
pmacroModel(16)
pmacroModel(18)
pmacroModel(19)
pmacro$no
pmacroModel(21)
pmacroModel(22)
pmacroModel(23)
pmacroModel(24)
str(pmacro)
require(semMediation)
no=nrow(pmacro)
for(i in 1:no){
cat("Model",pmacro$no[i],"\n")
if(pmacro$no[i]!=17) pmacroModel(pmacro$no[i])
}
devtools::document()
devtools::document()
devtools::check()
textrect
library(diagram)
textrect
textellipse
library(semMediation)
pmacro
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
library(semMediation)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
x<-c(0,1,0,1,0,1)
w<-c(1.592,1.592,2.80,2.80,5.20,5.20)
y<-c(2.619,2.377,2.746,2.747,2.998,3.482)
plot(y=y,x=w,pch=15,col="white",xlab="Climate Change Skepticism (W)",
ylab="Negative Justifications (Y)")
legend.txt<-c("Natural causes (X=0)","Climate change (X=1)")
legend("topleft",legend=legend.txt,lty=c(3,1),lwd=c(3,2))
lines(w[x==0],y[x==0],lwd=3,lty=3)
lines(w[x==1],y[x==1],lwd=2,lty=1)
skeptic<-c(1,1.171,1.4,1.8,2.2,2.6,3,3.4,3.8,3.934,4.2,
4.6,5,5.4,5.8,6.2,6.6,7,7.4,7.8,8.2,8.6,9)
effect<-c(-.361,-.327,-.281,-.200,-.120,-.039,.041,.122,.202,.229,.282,
.363,.443,.524,.604,.685,.765,.846,.926,1.007,1.087,1.168,1.248)
llci<-c(-.702,-.654,-.589,-.481,-.376,-.276,-.184,-.099,-.024,0,.044,.105,
.161,.212,.261,.307,.351,.394,.436,.477,.518,.558,.597)
ulci<-c(-.021,0,.028,.080,.136,.197,.266,.343,.428,.458,.521,.621,.726,.836,
.948,1.063,1.180,1.298,1.417,1.537,1.657,1.778,1.899)
plot(skeptic,effect,type="l",pch=19,ylim=c(-1,1.5),xlim=c(1,6),lwd=3,
ylab="Conditional effect of disaster frame",
xlab="Climate Change Skepticism (W)")
points(skeptic,llci,lwd=2,lty=2,type="l")
points(skeptic,ulci,lwd=2,lty=2,type="l")
abline(h=0,untf=FALSE,lty=3,lwd=1)
abline(v=1.171,untf=FALSE,lty=3,lwd=1)
abline(v=3.934,untf=FALSE,lty=3,lwd=1)
text(1.171,-1,"1.171",cex=0.8)
text(3.934,-1,"3.934",cex=0.8)
glbwarm
glbwarm=read.csv("data/glbwarm.csv",stringsAsFactors = FALSE)
glbwarm=read.csv("inst/pmacro/data/glbwarm.csv",stringsAsFactors = FALSE)
glbwarm
model=lm(govact~negemot,data=glbwarm)
summary(model)
library(ggplot2)
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_point()+geom_smooth()
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_point()+geom_smooth(method="lm")
ggplot(data=glbwarm,aes(x=negemot,y=govact))+geom_count()+geom_smooth(method="lm")
model1=lm(govact~sex,data=glbwarm)
summary(model1)
ggplot(data=glbwarm,aes(x=sex,y=govact))+geom_count()+geom_smooth(method="lm")
summary(model1)
glbwarm
str(glbwarm)
model2=lm(govact~.-partyid,data=glbwarm)
summary(model2)
pmi=read.csv("inst/pmacro/data/pmi.csv",stringsAsFactors = FALSE)
pmi
str(pmi)
library(semMediation)
runApp('inst/pmacro')
str(pmacro)
list.files(path="data","*.csv")
list.files(path="inst/pmacro/data","*.csv")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
strsplit(dataFiles,".")
library(stringr)
str_view(dataFiles,"*.")
dataFiles
str_view(dataFiles,"*.")
str_view(dataFiles,"*^.")
str_view(dataFiles,"*~.")
dataFiles
str_view(dataFiles,"^*")
str_view(dataFiles,"^*.")
str_view(dataFiles,"^.*")
str_view(dataFiles,"^.*[^\.]")
str_view(dataFiles,"^.*[^\\.]")
str_view(dataFiles,"^")
str_view(dataFiles,"[^.]")
str_view(dataFiles,"[^.]*")
strsplit(dataFiles,".")
str_view(dataFiles,"[^.]*")
str_extract_all(dataFiles,"[^.]*")
str_extract(dataFiles,"[^.]*")
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
dataNames=str_extract(dataFiles,"[^.]*")
for(i in seq_along(dataNames)){
data=read.csv(dataFiles[i],stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
for(i in seq_along(dataNames)){
data=read.csv(paste0("inst/pmacro/data/",dataFiles[i]),stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
teams
dataFiles=list.files(path="inst/pmacro/data","*.csv")
dataFiles
dataNames=str_extract(dataFiles,"[^.]*")
for(i in seq_along(dataNames)){
data=read.csv(paste0("inst/pmacro/data/",dataFiles[i]),stringsAsFactors = FALSE)
assign(dataNames[i],data)
}
teams
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
pmacro$M
pmacro$modName
pmacr$X
pmacro$X
pmacro$Y
pmacro$M
pmacro$modName
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
textInput3
actionButton
actionBttn
selectInput3
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
actionInput <- function(id) {
ns <- NS(id)
tagList(
textInput(ns("text"), label=NULL, value=id),
actionButton(ns("button"), "OK")
)
}
action <- function(input, output, session) {
eventReactive(input$button, {
return(input$text)
})
}
ui <- fluidPage(fluidRow(column(4, actionInput("b1")),
column(4, actionInput("b2")),
column(4, uiOutput("result"))))
server <-function(input, output, session) {
b1 <- callModule(action, "b1")
observeEvent(b1(), {
output$result = renderText(b1())
})
b2 <- callModule(action, "b2")
observeEvent(b2(), {
output$result = renderText(b2())
})
}
shinyApp(ui = ui, server = server)
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
# UI part of the module
ab_moduleUI <- function(id){
ns <- NS(id)
tagList(
fluidRow(
actionButton(ns("btn"), paste("ActionButton", id, sep="-")),
textOutput(ns("txt"))
)
)
}
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
runApp('inst/pmacro')
runApp('inst/pmacro')
# UI part of the module
ab_moduleUI <- function(id){
ns <- NS(id)
tagList(
fluidRow(
actionButton(ns("btn"), paste("ActionButton", id, sep="-")),
textOutput(ns("txt"))
)
)
}
# Server part of the module
ab_module <- function(input, output, session){
observeEvent(input$btn,{
output$txt <- renderText("More information shown")
})
}
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
# Server side
server <- function(input, output, session){
observeEvent(input$num, {
output$ui <- renderUI({
lapply(paste0("mod", 1:input$num), ab_moduleUI)
})
lapply(paste0("mod", 1:input$num), function(x) callModule(ab_module, x))
})
}
shinyApp(ui, server)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
pmacro$modName[40]
select=40
name=unlist(strsplit(pmacro$modName[i],":"))
name
name=unlist(strsplit(pmacro$modName[select],":"))
name
sites=unlist(strsplit(pmacro$modSite[select],":"))
x=strsplit(sites,",")
pos=as.numeric(unlist(strsplit(pmacro$pos[select],",")))
pmacro$modSite[select]
sites=unlist(strsplit(pmacro$modSite[select],":"))
sites
sites=strsplit(pmacro$modSite[select],":")
sites
sites
str(sites)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
select=2
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
str(sites)
moderator=list(name=name,site=sites)
str(moderator)
model=modmedEquation(X="X",Y="Y",moderator=moderator)
cat(model)
select=40
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
str(sites)
moderator=list(name=name,site=sites)
model=modmedEquation(X="X",Y="Y",moderator=moderator)
cat(model)
pmacro$M
runApp('inst/pmacro')
select=2
name=unlist(strsplit(pmacro$modName[select],":"))
name
pmacro$modSite[select]
sites=strsplit(pmacro$modSite[select],":")
sites
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
# UI
ui <- fluidPage(
# lapply(paste0("mod", 1:no_btn), ab_moduleUI)
numericInput("num", "Number of buttons to show" ,value = 5, min = 3, max = 10),
uiOutput("ui")
)
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram2(xb=TRUE,labels=labels)
moderator=list(name="Z1",label="Time Spent\n with Alex",pos=3,
site=list(c("a","b","c")),latent=FALSE)
conceptDiagram2(moderator=moderator,labels=labels)
moderator=list(name=c("Z1","Z2"),label=c("Time Spent\n with Alex","Z2label"),pos=c(3,3),
site=list(c("a","b","c"),c("b","c")),latent=c(FALSE,FALSE))
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4)
