shinyApp(ui,server)
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- btn
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",btn),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RVinserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
RV$inserted
})
}
shinyApp(ui,server)
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- btn
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",btn),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RVinserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
RV$inserted
})
}
shinyApp(ui,server)
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- btn
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",btn),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RV$inserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
RV$inserted
})
}
shinyApp(ui,server)
runApp('inst/removeUI/removeUI.R')
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- btn
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",btn),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RV$inserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
print(RV$inserted)
print(length(RV$inserted)/3+1)
})
}
shinyApp(ui,server)
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- length(RV$inserted)/3+1
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",btn),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RV$inserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
print(RV$inserted)
print(length(RV$inserted)/3+1)
})
}
shinyApp(ui,server)
server=function(input, output) {
## keep track of elements inserted and not yet removed
RV=reactiveValues()
observeEvent(input$insertBtn, {
btn <- input$insertBtn
id <- length(RV$inserted)/3+1
insertUI(
selector = '#placeholder',
## wrap element in a div with id for ease of removal
ui = tagList(
radioButtons(paste0("radio",id),paste0("radio",id),choices=colnames(mtcars)),
tags$div(tags$p(paste0("label"),id),id=id),
selectInput(paste0("site",id),NULL,choices=c("M","Y","M,Y"))
)
)
RV$inserted <-c(paste0("#radio",id),paste0('#',id),paste0("div:has(> #site", id,")"),RV$inserted)
})
observeEvent(input$removeBtn, {
removeUI(
## pass in appropriate div id
selector = RV$inserted[1]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[2]
)
removeUI(
## pass in appropriate div id
selector = RV$inserted[3]
)
RV$inserted <- RV$inserted[-(1:3)]
})
output$text=renderPrint({
print(RV$inserted)
print(length(RV$inserted)/3+1)
})
}
shinyApp(ui,server)
label3
library(semMediation)
ㅔㅡㅁㅊ개
pmacro
pmacro[1,]
pmacro$pos[1]
pmacro$pos[1]="4"
pmacro[1,]
pmacroModel(1)
pmacroModel(2)
pmacroModel$pos[2]
pmacro$pos[2]
pmacro$pos[2]="4,4"
pmacroModel(2)
statisticalDiagram(2)
statisticalDiagram(1)
devtools::use_data(pmacro,overwrite=TRUE)
runApp('inst/pmacro')
library(semMediation)
labels=list(X="Time Spent in\n Grad School", M="# of\n Publications", Y="# of Job Offers")
conceptDiagram2(xb=TRUE,labels=labels)
moderator=list(name="Z1",label="Time Spent\n with Alex",pos=3,
site=list(c("a","b","c")),latent=FALSE)
conceptDiagram2(moderator=moderator,labels=labels)
moderator=list(name=c("Z1","Z2"),label=c("Time Spent\n with Alex","Z2label"),pos=c(3,3),
site=list(c("a","b","c"),c("b","c")),latent=c(FALSE,FALSE))
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
radx=0.12;rady=0.05;xmargin=0.03;yinterval=NULL
latent=rep(FALSE,3);xb=FALSE;mc=FALSE;labels=list()
labels
X="X";M="M";Y="Y";latent=rep(FALSE,3);xb=FALSE
moderator
if(is.null(yinterval)) yinterval=rady*6
openplotmat()
library(diagram)
if(is.null(yinterval)) yinterval=rady*6
openplotmat()
x=c(0+radx+xmargin,0.5)
y=c(1-(radx+xmargin),0.5)
m=c(0.5,0.5+yinterval)
moderator
select=which(moderator$pos==4)
xpos=midPoint(0,1,length(select))
#' @param from coordinates (x,y) of the point *from* which to draw arrow.
#' @param to coordinates (x,y) of the point *to* which to draw arrow.
#' @param lwd line width
#' @param adjust adjust position
#' @param label label
#' @param label.pos label position
#' @param arr.pos arrow position
#' @param ... Further argument to be passed to straightarrow()
#' @export
#' @importFrom diagram textplain straightarrow
myarrow=function(from,to,lwd=1,adjust=1,label="",label.pos=0.5,arr.pos=NULL,...){
if(!is.null(arr.pos)){
if(arr.pos==0) arr.pos<-NULL
}
if(is.null(arr.pos)){
if(adjust){
if(from[2]==to[2]) arr.pos=0.8
else if(from[2]>to[2]) arr.pos=0.7
else arr.pos=0.68
} else{
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
if(distance<=0.23) {
arr.pos=0.86
} else if(distance>0.5){
arr.pos=0.95
} else{
arr.pos=0.94
}
}
distance=abs(to[2]-from[2])+abs(to[1]-from[1])
# str(distance)
# str(arr.pos)
}
mid=from+label.pos*(to-from)
textplain(mid=mid,lab=label,adj=c(1,-0.5))
straightarrow(from=from,to=to,lwd=lwd,arr.pos=arr.pos,arr.type="triangle",...)
}
#' Draw node
#' @param ... Further argument to be passed to textellipse() or textrect()
#' @param latent Logical
#' @importFrom diagram textellipse textrect
#' @export
drawtext=function(...,latent=TRUE){
if(latent) textellipse(...)
else textrect(...)
}
midPoint=function(from=0,to=1,length.out=2){
res=seq(from,to,length.out = length.out+2)
res[c(-1,-length(res))]
}
select=which(moderator$pos==4)
xpos=midPoint(0,1,length(select))
select
for(j in seq_along(select)){
temp=c(xpos[j],0.5+yinterval-0.05)
assign(paste0("z",select[j]),temp)
}
select=which(moderator$pos==3)
xpos=midPoint(0,1,length(select))
select
for(j in seq_along(select)){
temp=c(xpos[j],0.5-yinterval+0.05)
assign(paste0("z",select[j]),temp)
}
select=which(moderator$pos==2)
select
if(length(select)==1){
xpos=1-(radx+xmargin)
ypos=0.5+yinterval-rady
} else{
xpos=midPoint(0.5+2*radx,1-radx,length(select))
ypos=midPoint(0.5+yinterval+2*rady,0.5+rady,length(select))
}
for(j in seq_along(select)){
temp=c(xpos[j],ypos[j])
assign(paste0("z",select[j]),temp)
}
select=which(moderator$pos==1)
if(length(select)==1){
xpos=radx+xmargin
ypos=0.5+yinterval-rady
} else{
xpos=midPoint(radx-xmargin,0.5-2*radx,length(select))
ypos=midPoint(0.5+rady,0.5+yinterval+2*rady,length(select))
}
for(j in seq_along(select)){
temp=c(xpos[j],ypos[j])
assign(paste0("z",select[j]),temp)
}
startpos=list()
sum=1
for(i in seq_along(moderator$pos)){
for(j in 1:length(moderator$site[[i]])){
startpos[[sum]]=get(paste0("z",i))
sum=sum+1
}
}
startpos
labels
(xlab=ifelse(is.null(labels[[X]]),X,labels[[X]]))
if(!is.null(M)) (mlab=ifelse(is.null(labels[[M]]),M,labels[[M]]))
(ylab=ifelse(is.null(labels[[Y]]),Y,labels[[Y]]))
if(!is.null(M)){
# myarrow(from=x,to=y,label="c'")
# myarrow(from=x,to=m,label="a")
# myarrow(from=m,to=y,label="b")
myarrow(from=x,to=y)
myarrow(from=x,to=m)
myarrow(from=m,to=y)
} else{
myarrow(from=x,to=y,label="")
}
if(xb) myarrow(from=x,to=0.5*(m+y))
if(mc) myarrow(from=m,to=0.5*(x+y))
endpos=moderator2pos(moderator,x,y,m)
#'get position from moderator
#'@param moderator A list
#'@param x position of x
#'@param y position of y
#'@param m position of m
moderator2pos=function(moderator=list(),x,y,m){
result=unlist(moderator$site)
result
count=rep(0,3)
total=c(sum(result=="a"),sum(result=="b"),sum(result=="c"))
pos=list()
x
y
m
(x+y)*2/3
for(i in seq_along(result)){
if(result[i]=="a"){
count[1]=count[1]+1
pos[[i]]=(m*count[1]+x*(total[1]+1-count[1]))/(total[1]+1)
} else if(result[i]=="b"){
count[2]=count[2]+1
pos[[i]]=(y*count[2]+m*(total[2]+1-count[2]))/(total[2]+1)
} else{
count[3]=count[3]+1
pos[[i]]=(y*count[3]+x*(total[3]+1-count[3]))/(total[3]+1)
}
}
pos
}
endpos=moderator2pos(moderator,x,y,m)
endpos
runApp('inst/pmacro')
cocar
covar
x
y
m
count=length(covar$name)
count
x
moderator2pos(moderator,x,y,m)
covar
covar$site
covar$site[[1]]
count=length(covar$name)
count
covar$site[[1]]
pos=list()
for(i in 1:count){
pos[[i]]<-c(x[1]+(radx/2)*(i),x[2]+(rady/2+0.01)*count)
if("M" %in% covar$site[[i]]) myarrow(pos[[i]],m)
if("Y" %in% covar$site[[i]]) myarrow(pos[[i]],y)
}
covar
library(semMediation)
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
library(semMediation)
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
library(semMediation)
library(semMediation)
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
library(semMediation)
conceptDiagram2(moderator=moderator,labels=labels,yinterval=0.4,covar=covar)
conceptDiagram2(covar=covar)
conceptDiagram2(covar=covar)
conceptDiagram2(M="",moderator=list(name="M",site="c"),covar=covar)
conceptDiagram2(M=NULL,moderator=list(name="M",site="c"),covar=covar)
conceptDiagram2(M="",moderator=list(name="M",site="c"),covar=covar)
conceptDiagram2(moderator=list(name="M",site="c"),covar=covar)
conceptDiagram2(moderator=list(name="M",site=list("c")),covar=covar)
conceptDiagram2(moderator=list(name="M",pos=3,site=list("c")),covar=covar)
conceptDiagram2(M="",moderator=list(name="M",pos=3,site=list("c")),covar=covar)
library(semMediation)
conceptDiagram2(M="",moderator=list(name="M",pos=3,site=list("c")),covar=covar)
conceptDiagram2(M="",moderator=list(name="M",pos=3,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(M="",moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(M=NULL,moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(covar=covar)
conceptDiagram2(M=NULL,moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(covar=covar)
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
conceptDiagram2(M=NULL,moderator=list(name="M",pos=4,site=list("c"),latent=FALSE),covar=covar)
conceptDiagram2(covar=covar)
library(semMediation)
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
pmacroModel(1,covar=covar)
library(semMediation)
covar=list(name=c("C1","C2"),label=c("sex","tenure"),site=list(c("M","Y"),c("Y")))
pmacroModel(1,covar=covar)
pmacroModel(4,covar=covar)
pmacroModel(1,covar=covar)
pmacroModel(1,covar=covar)
pmacroModel(4,covar=covar)
covar=list(name=c("C1","C2","C3"),label=c("ese",sex","tenure"),site=list("M",c("M","Y"),c("Y")))
pmacroModel(4,covar=covar)
covar=list(name=c("C1","C2","C3"),label=c("ese",sex","tenure"),site=list("M",c("M","Y"),c("Y")))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list("M",c("M","Y"),c("Y")))
pmacroModel(4,covar=covar)
pmacroModel(1,covar=covar)
runApp('inst/pmacro')
pmacroModel(1)
library(semMediation)
pmacroModel(1)
pmacroModel(4)
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list("M",c("M","Y"),c("Y")))
pmacroModel(4,covar=covar)
pmacroModel(1,covar=covar)
pmacroModel(1)
devtools::document()
devtools::check()
devtools::document()
devtools::document()
install.packages("roxygen2")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
pmacroModel(4,covar=covar)
pmacroModel(1,covar=covar)
shiny::runApp('inst/pmacro')
pmacroModel(2,covar=covar)
