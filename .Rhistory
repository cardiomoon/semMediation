stat_function(fun=fun2,color="red",lty=3)
p
res1=fun2eq(fun1)
res2=fun2eq(fun2)
slope=c(res1$slope,res2$slope)
intercept=c(res1$intercept,res2$intercept)
name=c("Direct Effect","Indirect Effect")
df=data.frame(name,slope,intercept,stringsAsFactors = FALSE)
df
info=getAspectRatio(p)
info
ratio=info$ratio
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0("italic(Y)==",sprintf("%0.3f",df$intercept),ifelse(df$slope>0,"+",""),
sprintf("%0.3f",df$slope),"*italic(W)")
p
x=info$xmin+(info$xmax-info$xmin)/3*(1:2)
x
y1=unlist(lapply(1:2,function(i){fun1(x[i])}))
y2=unlist(lapply(1:2,function(i){fun2(x[i])}))
select=which.max(abs(y1-y2))
df$x=x[select]
y=c(fun1(x[select]),fun2(x[select]))
df$y=y
df
p+coord_fixed(ratio=ratio)+
geom_text(data=df,aes(x=x,y=y,label=name,angle=angle),color=c("black","red"),vjust=-1.0)+
geom_text(data=df,aes(x=x,y=y,label=label,angle=angle),color=c("black","red"),
vjust=1.5,parse=TRUE)+
guides(color=FALSE)+
xlab(paste0(mod,"(W)"))+ylab(paste0(Y,"(Y)"))
}
conditionalEffectPlot(fit,data=disaster,Y="donate",mod="skeptic")
conditionalEffectPlot=function(fit,values=NULL,data,Y="donate",mod="skeptic"){
res=parameterEstimates(fit)
res=res[res$label!="",]
res
x=modmedSummary(fit,mod=mod,values=values)
indirect=attr(x,"indirect")
direct=attr(x,"direct")
indirect
direct
for(i in 1:nrow(res)){
indirect=str_replace(indirect,res$label[i],as.character(res$est[i],3))
direct=str_replace(direct,res$label[i],as.character(res$est[i],3))
}
fun1=function(W) eval(parse(text=direct))
fun2=function(W) eval(parse(text=indirect))
p<-ggplot(data=data,aes_string(x=mod,y=Y))+
stat_function(fun=fun1,color="black")+
stat_function(fun=fun2,color="red",lty=3)
p
res1=fun2eq(fun1)
res2=fun2eq(fun2)
slope=c(res1$slope,res2$slope)
intercept=c(res1$intercept,res2$intercept)
name=c("Direct Effect","Indirect Effect")
df=data.frame(name,slope,intercept,stringsAsFactors = FALSE)
df
info=getAspectRatio(p)
info
ratio=info$ratio
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0("italic(Y)==",sprintf("%0.3f",df$intercept),ifelse(df$slope>0,"+",""),
sprintf("%0.3f",df$slope),"*italic(W)")
p
x=info$xmin+(info$xmax-info$xmin)/3*(1:2)
x
y1=unlist(lapply(1:2,function(i){fun1(x[i])}))
y2=unlist(lapply(1:2,function(i){fun2(x[i])}))
select=which.max(abs(y1-y2))
df$x=x[select]
y=c(fun1(x[select]),fun2(x[select]))
df$y=y
df
p+coord_fixed(ratio=ratio)+
geom_text(data=df,aes(x=x,y=y,label=name,angle=angle),color=c("black","red"),vjust=-1.0)+
geom_text(data=df,aes(x=x,y=y,label=label,angle=angle),color=c("black","red"),
vjust=1.5,parse=TRUE)+
guides(color=FALSE)+
xlab(paste0(mod,"(W)"))+ylab(paste0(Y,"(Y)"))
}
values=quantile(disaster$skeptic,probs=c(0.5,0.16,0.84),type=6)
x=modmedSummary(fit2,mod="skeptic",values=values)
x
conditionalEffectPlot(fit2,values=values,data=disaster,Y="donate",mod="skeptic")
fit=fit2;values=values;data=disaster;Y="donate";mod="skeptic"
res=parameterEstimates(fit)
res=res[res$label!="",]
res
x=modmedSummary(fit,mod=mod,values=values)
indirect=attr(x,"indirect")
direct=attr(x,"direct")
indirect
direct
for(i in 1:nrow(res)){
indirect=str_replace(indirect,res$label[i],as.character(res$est[i],3))
direct=str_replace(direct,res$label[i],as.character(res$est[i],3))
}
fun1=function(W) eval(parse(text=direct))
fun2=function(W) eval(parse(text=indirect))
p<-ggplot(data=data,aes_string(x=mod,y=Y))+
stat_function(fun=fun1,color="black")+
stat_function(fun=fun2,color="red",lty=3)
p
res1=fun2eq(fun1)
res2=fun2eq(fun2)
slope=c(res1$slope,res2$slope)
intercept=c(res1$intercept,res2$intercept)
name=c("Direct Effect","Indirect Effect")
df=data.frame(name,slope,intercept,stringsAsFactors = FALSE)
df
info=getAspectRatio(p)
info
ratio=info$ratio
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0("italic(Y)==",sprintf("%0.3f",df$intercept),ifelse(df$slope>0,"+",""),
sprintf("%0.3f",df$slope),"*italic(W)")
p
x=info$xmin+(info$xmax-info$xmin)/3*(1:2)
x
y1=unlist(lapply(1:2,function(i){fun1(x[i])}))
y2=unlist(lapply(1:2,function(i){fun2(x[i])}))
select=which.max(abs(y1-y2))
df$x=x[select]
y=c(fun1(x[select]),fun2(x[select]))
df$y=y
df
p+coord_fixed(ratio=ratio)+
geom_text(data=df,aes(x=x,y=y,label=name,angle=angle),color=c("black","red"),vjust=-1.0)+
geom_text(data=df,aes(x=x,y=y,label=label,angle=angle),color=c("black","red"),
vjust=1.5,parse=TRUE)+
guides(color=FALSE)+
xlab(paste0(mod,"(W)"))+ylab(paste0(Y,"(Y)"))
conditionalEffectPlot=function(fit,values=NULL,data,Y="donate",mod="skeptic"){
res=parameterEstimates(fit)
res=res[res$label!="",]
res
x=modmedSummary(fit,mod=mod,values=values)
indirect=attr(x,"indirect")
direct=attr(x,"direct")
indirect
direct
for(i in 1:nrow(res)){
indirect=str_replace(indirect,res$label[i],as.character(res$est[i],3))
direct=str_replace(direct,res$label[i],as.character(res$est[i],3))
}
fun1=function(W) eval(parse(text=direct))
fun2=function(W) eval(parse(text=indirect))
p<-ggplot(data=data,aes_string(x=mod,y=Y))+
stat_function(fun=fun1,color="black",size=2)+
stat_function(fun=fun2,color="red",lty=3,size=2)
p
res1=fun2eq(fun1)
res2=fun2eq(fun2)
slope=c(res1$slope,res2$slope)
intercept=c(res1$intercept,res2$intercept)
name=c("Direct Effect","Indirect Effect")
df=data.frame(name,slope,intercept,stringsAsFactors = FALSE)
df
info=getAspectRatio(p)
info
ratio=info$ratio
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0("italic(Y)==",sprintf("%0.3f",df$intercept),ifelse(df$slope>0,"+",""),
sprintf("%0.3f",df$slope),"*italic(W)")
p
x=info$xmin+(info$xmax-info$xmin)/3*(1:2)
x
y1=unlist(lapply(1:2,function(i){fun1(x[i])}))
y2=unlist(lapply(1:2,function(i){fun2(x[i])}))
select=which.max(abs(y1-y2))
df$x=x[select]
y=c(fun1(x[select]),fun2(x[select]))
df$y=y
df
p+coord_fixed(ratio=ratio)+
geom_text(data=df,aes(x=x,y=y,label=name,angle=angle),color=c("black","red"),vjust=-1.0)+
geom_text(data=df,aes(x=x,y=y,label=label,angle=angle),color=c("black","red"),
vjust=1.5,parse=TRUE)+
guides(color=FALSE)+
xlab(paste0(mod,"(W)"))+ylab(paste0(Y,"(Y)"))
}
conditionalEffectPlot(fit,data=disaster,Y="donate",mod="skeptic")
conditionalEffectPlot(fit2,values=values,data=disaster,Y="donate",mod="skeptic")
conditionalEffectPlot=function(fit,values=NULL,data,Y="donate",mod="skeptic"){
res=parameterEstimates(fit)
res=res[res$label!="",]
res
x=modmedSummary(fit,mod=mod,values=values)
indirect=attr(x,"indirect")
direct=attr(x,"direct")
indirect
direct
for(i in 1:nrow(res)){
indirect=str_replace(indirect,res$label[i],as.character(res$est[i],3))
direct=str_replace(direct,res$label[i],as.character(res$est[i],3))
}
fun1=function(W) eval(parse(text=direct))
fun2=function(W) eval(parse(text=indirect))
p<-ggplot(data=data,aes_string(x=mod,y=Y))+
stat_function(fun=fun1,color="black",size=1)+
stat_function(fun=fun2,color="red",lty=3,size=1)
p
res1=fun2eq(fun1)
res2=fun2eq(fun2)
slope=c(res1$slope,res2$slope)
intercept=c(res1$intercept,res2$intercept)
name=c("Direct Effect","Indirect Effect")
df=data.frame(name,slope,intercept,stringsAsFactors = FALSE)
df
info=getAspectRatio(p)
info
ratio=info$ratio
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0("italic(Y)==",sprintf("%0.3f",df$intercept),ifelse(df$slope>0,"+",""),
sprintf("%0.3f",df$slope),"*italic(W)")
p
x=info$xmin+(info$xmax-info$xmin)/3*(1:2)
x
y1=unlist(lapply(1:2,function(i){fun1(x[i])}))
y2=unlist(lapply(1:2,function(i){fun2(x[i])}))
select=which.max(abs(y1-y2))
df$x=x[select]
y=c(fun1(x[select]),fun2(x[select]))
df$y=y
df
p+coord_fixed(ratio=ratio)+
geom_text(data=df,aes(x=x,y=y,label=name,angle=angle),color=c("black","red"),vjust=-1.0)+
geom_text(data=df,aes(x=x,y=y,label=label,angle=angle),color=c("black","red"),
vjust=1.5,parse=TRUE)+
guides(color=FALSE)+
xlab(paste0(mod,"(W)"))+ylab(paste0(Y,"(Y)"))
}
conditionalEffectPlot(fit,data=disaster,Y="donate",mod="skeptic")
conditionalEffectPlot(fit2,values=values,data=disaster,Y="donate",mod="skeptic")
fit=sem(model=model1,data=disaster)
conditionalEffectPlot(fit,data=disaster,Y="donate",mod="skeptic")
conditionalEffectPlot(fit2,values=values,data=disaster,Y="donate",mod="skeptic")
devtools::docuemnt()
devtools::document()
library(semMediation)
system("grep -r 'strGroup' *")
res=parameterEstimates(fit)
res=res[res$label!="",]
res
x=modmedSummary(fit,mod=mod,values=values)
indirect=attr(x,"indirect")
direct=attr(x,"direct")
indirect
direct
indirect
removeParentheses(indirect)
removeParenthesis("(a1+a3*skeptic.mean)*(b1+b2)")
removeParentheses("(a1+a3*skeptic.mean)*(b1+b2)")
string=(a1+a3*skeptic.mean)*(b1)
string=(a1+a3*skeptic.mean)*(b1+b2)
source('~/ownCloud/Documents/semMediation/inst/pmacro/Untitled.R', echo=TRUE)
string="(a1+a3*skeptic.mean)*(b1+b2)"
str_view(string,"^(*$)")
str_view(string,"^\(*$\)")
str_view(string,"^\\(*$\\)")
str_view(string,"^\\(*")
str_view(string,"^\\(*\\)$")
str_view(string,"^\\(\\)$")
str_view(string,"^a")
str_view(string,"^\\(\)$")
str_view(string,"^\\(\\)$")
str_view(string,"^\\(*\\)$")
str_view(string,"^\\(.\\)$")
str_view(string,"\\(.\\)")
string="(a1+a3*skeptic.mean)*(b1+b2)"
str_view(string,"\\(.\\)")
str_view(string,"\\(.*\\)")
str_view(string,"[^\\(\\]")
str_view(string,"[^\\(\\)]")
str_view(string,"[^\\(\\)].*")
str_view(string,"[\\(\\)]")
str_view(string,"[^\\(\\)]")
str_view(string,"[^\\(\\)]*")
str_view(string,"[^\\(\\)].*")
str_view(string,"[^\\(\\)].")
str_view(string,"[^\\(\\)].*")
str_view(string,"()")
str_view(string,"\\(\\)")
str_view(string,"\\(")
str_view_all(string,"\\(")
str_view_all(string,"\\(\\)")
str_view_all(string,"\\(\\)")
str_view_all(string,"\\(|\\)")
str_view_all(string,"[^\\(|\\)]")
str_extract_all(string,"[^\\(|\\)]")
str_view_all(string,"[^\\(|\\)].*")
str_view(string,"[^\\(|\\)].*")
str_view_all(string,"[^\\(|\\)].*")
str_view_all(string,"[^\\(|\\)].*")
str_view_all(string,"[\\(|\\)]")
str_view_all(string,"\\(|\\)")
str_view_all(string,"[^\\(\\)]")
str_view_all(string,"\\)")
str_view_all(string,"\\(.*\\)")
str_view_all(string,"\\([^\\(\\)]\\)")
str_view_all(string,"\\([^\\(\\)]\\)")
str_view_all(string,"\\(\\)")
string="(a1+a3*skeptic.mean)*(b1+b2)"
str_view_all(string,"\\(\\)")
str_view_all(string,"\\(")
str_view_all(string,"\\(.*\\)")
str_view_all(string,"\\(?*\\)")
str_view_all(string,"\\(.\\)")
str_view_all(string,"\\(.*\\)")
str_view_all(string,".*")
str_view_all(string,"[^\\(\\)].*")
str_view_all(string,"[^\\|(\\)].*")
str_view_all(string,"[^\\|(\\)]")
str_locate_all(string,"\\(")
str_view_all(string,"\\(")
str_view_all(string,"\\)")
str_view_all(string,"\\(")
str_view_all(string,"\\)")
str_locate_all(string,"\\(")
str_locate_all(string,"\\)")
str_locate_all(string,"\\(")
str_locate_all(string,"\\)")
str_locate_all(string,"\\(")
str_locate_all(string,"\\)")
start=str_locate_all(string,"\\(")
end=str_locate_all(string,"\\)")
str_locate_all(string,"\\(")
unlist(str_locate_all(string,"\\("))
unique(unlist(str_locate_all(string,"\\(")))
str_locate(string,"\\)")
str_locate_all(string,"\\)")
unique(unlist(str_locate_all(string,"\\(")))
unique(unlist(str_locate_all(string,"\\)")))
start=unique(unlist(str_locate_all(string,"\\(")))
end=unique(unlist(str_locate_all(string,"\\)")))
start
end
for(i in 1:length(start)){
substring[[i]]=substr(string,start=start[i]+1,end=end[i]-1)
}
start
end
substring=list()
for(i in 1:length(start)){
substring[[i]]=substr(string,start=start[i]+1,stop=end[i]-1)
}
substring
string="(a1+a3*skeptic.mean)*((b1+b2)+b3)"
start=unique(unlist(str_locate_all(string,"\\(")))
end=unique(unlist(str_locate_all(string,"\\)")))
start
end
substring=list()
for(i in 1:length(start)){
substring[[i]]=substr(string,start=start[i]+1,stop=end[i]-1)
}
substring
start=unique(unlist(str_locate_all(string,"\\(")))
end=unique(unlist(str_locate_all(string,"\\)")))
start
end
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
disaster=read.csv("./inst/pmacro/data/disaster.csv",stringsAsFactors = FALSE)
disaster
ggplot(data=disaster,aes(x=skpetic,y=donate))+geom_point()
ggplot(data=disaster,aes(x=skeptic,y=donate))+geom_point()
runApp('inst/pmacro')
ggplot(data=disaster,aes(x=skeptic,y=donate))+geom_point()+
stat_function(fun=fun1)+
stat_function(fun=fun2)
fun1=function(x) {0.10+0.015*x}
fun2=function(x) {0.519-0.186*x}
ggplot(data=disaster,aes(x=skeptic,y=donate))+geom_point()+
stat_function(fun=fun1)+
stat_function(fun=fun2)
ggplot(data=disaster,aes(x=skeptic,y=donate))+
stat_function(fun=fun1)+
stat_function(fun=fun2)
fun1=function(x) {0.10+0.015*x}
fun2=function(x) {0.519-0.186*x}
disaster=read.csv("./inst/pmacro/data/disaster.csv",stringsAsFactors = FALSE)
disaster
fit=lm(justify ~  frame+frame*skeptic,data=disaster)
summary(fit)
fun1=function(x) {0.10+0.015*x}
fun2=function(x) {0.519-0.186*x}
ggplot(data=disaster,aes(x=skeptic))+
stat_function(fun=fun1)+
stat_function(fun=fun2)
require(ggplot2)
ggplot(data=disaster,aes(x=skeptic))+
stat_function(fun=fun1)+
stat_function(fun=fun2)
ggplot(data=disaster,aes(x=skeptic))+
stat_function(fun=fun1)+
stat_function(fun=fun2)
devtools::document()
devtools::document()
library(semMediation)
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
system("grep -r 'rlang' *")
system("grep -r 'rlang' *")
system("grep -r 'rlang' *")
system("grep -r 'tibble' *")
system("grep -r 'tibble' *")
devtools::document()
devtools::check()
disaster=rio::import("~/Documents/ownCloud/Documents/hong/hayes2018data/disaster/disaster.sav")
disaster=rio::import("~/ownCloud/Documents/hong/hayes2018data/disaster/disaster.sav")
disater
disaster
str(disaster)
disaster
disaster$frame
str(disaster$frame)
fit=lm(donate~frame,data=disaster)
summary(fit)
caskets=rio::import("~/ownCloud/Documents/hong/hayes2018data/caskets/caskets.sav")
str(caskets)
estress=rio::import("~/ownCloud/Documents/hong/hayes2018data/estress/estress.sav")
str(estress)
glbwarm=rio::import("~/ownCloud/Documents/hong/hayes2018data/glbwarm/glbwarm.sav")
str(glbwarm)
pmi=rio::import("~/ownCloud/Documents/hong/hayes2018data/pmi/pmi.sav")
str(pmi)
protest=rio::import("~/ownCloud/Documents/hong/hayes2018data/protest/protest.sav")
str(protest)
teams=rio::import("~/ownCloud/Documents/hong/hayes2018data/teams/teams.sav")
str(teams)
devtools::use_data(teams)
system("grep -r 'parrows1' *")
str(disaster)
devtools::document()
devtools::document()
devtools::document()
parrows1
parrows<-parrows1
devtools::use_data(parrows)
devtools::document()
devtools::document()
devtools::check()
library(semMediation)
str(protest)
devtools::use_data(protest)
head(protest)
protest$subnum
unique(protest$subnum)
length(unique(protest$subnum))
str(pmi)
devtools::use_data(pmi)
str(glbwarm)
attr(glbwarm$ideology,"names")
attr(glbwarm$ideology,"labels")
devtools::use_data(glbwarm)
str(estress)
devtools::use_data(estress)
str(disaster)
devtools::use_data(disaster)
str(caskets)
attr(caskets$educ,"labels")
devtools::use_data(caskets)
devtools::document()
library(semMediation)
devtools::document()
library(semMediation)
st
devtools::document()
devtools::check()
shiny::runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
runApp('inst/pmacro')
shiny::runApp('inst/pmacro')
df3 <- readRDS("~/ownCloud/Documents/semMediation/inst/pmacro/df3.RDS")
df3
interaction <- readRDS("~/ownCloud/Documents/semMediation/inst/pmacro/interaction.RDS")
interaction
devtools::document()
devtools::document()
devtools::check()
library(semMediation)
runApp('inst/pmacro')
